{ ****************************************************************** }
{                                                                    }
{   VCL component TClienteCod                                        }
{                                                                    }
{   Códigos para Cliente                                             }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file c:\elmer\classe\principal\clientecod.cd }
{   on 7 Aug 2000 at 10:04                                           }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit ClienteCod;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Banco, Configuracao, Dbgrids;

type
  TClienteCod = class(TSQuery)
    private
      { Private fields of TClienteCod }
        { Storage for property Codigo }
        FCodigo : Integer;
        { Storage for property CodigoCLI }
        FCodigoCLI : Integer;
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoFOR }
        FCodigoFOR : Integer;
        { Storage for property ECodigo }
        FECodigo : TEdit;
        { Storage for property ECodigoCLI }
        FECodigoCLI : TEdit;
        { Storage for property ECodigoFOR }
        FECodigoFOR : TDBLookupComboBox;
        { Storage for property EDbgrid }
        FEDbgrid : TDBGrid;

      { Private methods of TClienteCod }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property Codigo }
        function GetCodigo : Integer;
        { Write method for property Codigo }
        procedure SetCodigo(Value : Integer);
        { Read method for property CodigoCLI }
        function GetCodigoCLI : Integer;
        { Write method for property CodigoCLI }
        procedure SetCodigoCLI(Value : Integer);
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoFOR }
        function GetCodigoFOR : Integer;
        { Write method for property CodigoFOR }
        procedure SetCodigoFOR(Value : Integer);

    protected
      { Protected fields of TClienteCod }

      { Protected methods of TClienteCod }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TClienteCod }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TClienteCod }
        { Altera um Código }
        function Alterar(CdCNC,CdCod,CdCLI,CdFor: integer):Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCod,CdCLI,CdFOR,CdCNC);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        { Insere um Cliente }
        function Inserir(CdCNC,CdCod,CdCLI,CdFor :integer):Boolean;
        function InserirAuto:Boolean;
        function LocalizarCod(CdCod,CdCLI,CdFOR,CdCNC:integer):boolean;
        procedure Post;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TClienteCod }
        property Codigo : Integer read GetCodigo write SetCodigo;
        { Código do Cliente }
        property CodigoCLI : Integer read GetCodigoCLI write SetCodigoCLI;
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        { Código Fornecedor }
        property CodigoFOR : Integer read GetCodigoFOR write SetCodigoFOR;
        property ECodigo : TEdit read FECodigo write FECodigo;
        property ECodigoCLI : TEdit read FECodigoCLI write FECodigoCLI;
        property ECodigoFOR : TDBLookupComboBox
             read FECodigoFOR write FECodigoFOR;
        property EDbgrid : TDBGrid read FEDbgrid write FEDbgrid;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TClienteCod with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TClienteCod]);
end;

{ Method to set variable and property values and create objects }
procedure TClienteCod.AutoInitialize;
begin
     Estado := 0;
     FECodigo := nil;
     FECodigoCLI := nil;
     FECodigoFOR := nil;
     FEDbgrid := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TClienteCod.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECodigo then
        FECodigo := nil;
     if AComponent = FECodigoCLI then
        FECodigoCLI := nil;
     if AComponent = FECodigoFOR then
        FECodigoFOR := nil;
     if AComponent = FEDbgrid then
        FEDbgrid := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TClienteCod.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property Codigo }
function TClienteCod.GetCodigo : Integer;
begin
  try
    Result := Self.fieldByName('CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property Codigo }
procedure TClienteCod.SetCodigo(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CODIGO"!');
    end;
end;

{ Read method for property CodigoCLI }
function TClienteCod.GetCodigoCLI : Integer;
begin
  try
    Result := Self.fieldByName('CLI_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCLI }
procedure TClienteCod.SetCodigoCLI(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CLI_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CLI_CODIGO"!');
    end;
end;

{ Read method for property CodigoCNC }
function TClienteCod.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TClienteCod.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoFOR }
function TClienteCod.GetCodigoFOR : Integer;
begin
  try
    Result := Self.fieldByName('FOR_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoFOR }
procedure TClienteCod.SetCodigoFOR(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('FOR_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "FOR_CODIGO"!');
    end;
end;

{ Altera um Código }
function TClienteCod.Alterar(CdCNC,CdCod,CdCLI,CdFor: integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result := true;
  If not(localizarCod(CdCod,CdCLI,CdFOR,CdCNC)) Then
  begin
    result := false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      Codigo     := CdCod;
      CodigoFor  := CdFOR;

      try
        Post;
      except
        result := false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifiqu se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result := false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

procedure TClienteCod.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   ECodigoFOR.Enabled    :=Habilitar;
 except
 end;
 Try
   ECodigo.Enabled           :=Habilitar;
 except
 end;
end;

procedure TClienteCod.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TClienteCod.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   ECodigo.Text       :=IntToStr(Codigo);
 except
 end;
 try
   ECodigoFOR.KeyValue     :=CodigoFOR;
 except
 end;
end;

constructor TClienteCod.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TClienteCod.Deletar(CdCod,CdCLI,CdFOR,CdCNC);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdCod,CdCLI,CdFOR,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
     Delete;
     if TQuery(Self).isEmpty then
     begin
       try
        ECodigo.Clear;
       except
       end;
       try
        ECodigoFOR.KeyValue := 0;;
       except
       end;
     end;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TClienteCod.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TClienteCod.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  menssagem:string;
begin
  menssagem:='';
  if not VerificaInteiroBranco(ECodigo.text) then
    menssagem:=menssagem+'Código inválido!';
  if menssagem<>'' then
    raise exception.Create(menssagem);
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
    LocalizarCod(SCodigo, CodigoCLI, CodigoFOR, CodigoCNC);
  End;

  If Estado=2 then
  Begin
    Alterarauto;
    close;
    open;
  End;

  AtualizaControles(False);
  Estado:=0;
end;

{ Insere um Cliente }
function TClienteCod.Inserir(CdCNC,CdCod,CdCLI,CdFor :integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Cod:Integer;
begin
  If (localizarCod(CdCod,CdCli,CdFor,CdCNC)) Then
  begin
    ShowMessage('Não foi possível inserir o registro corrente pois o mesmo já existe!');
    result:=false;
  end
  else
  begin
   result:=true;
    try
        Insert;
        Codigo         := CdCod;
        CodigoCLI      := CdCli;
        CodigoFOR      := CdFor;
        CodigoCNC      := CdCNC;

        try
          Post;
        except
          result := false;
          Cancel;
          ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
        end;
      except
        result := false;
        ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
      end;
  end;
end;

function TClienteCod.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Aux:TDataSetNotifyEvent;
begin
  If (localizarCod(Codigo,CodigoCLI,CodigoFOR,CodigoCNC)) Then
  begin
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
    result:=false;
  end
  Else
  begin
    try
    Begin
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
        Codigo := StrToInt(ECodigo.Text);
      except
      end;
      try
        CodigoCLI := StrToInt(CodigoCLI.Text);
      except
      end;
      try
        CodigoFOR := ECOdigoFOR.KeyValue;
      except
      end;
      try
        CodigoCNC := CConfiguracao.CodigoCNC;
      except
      end;
      
      
      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    end;
    except
      result:=false;
      ShowMessage('Não foi possível incluir registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  end;
end;

procedure TClienteCod.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

function TClienteCod.LocalizarCod(CdCod,CdCLI,CdFOR,CdCNC:integer):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
begin
  If (CdCod<>Codigo) or (CdCli<>CodigoCli) or (CdFor<>CodigoFOR)
     or (CdCNC<>CodigoCNC)Then
    If locate('CODIGO;CLI_CODIGO;FOR_CODIGO;CNC_CODIGO', vararrayof([CdCod,CdCLI,CdFOR,CdCNC]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;
end;

procedure TClienteCod.Post;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
 var
  acao:integer;
begin
  if state=dsInsert then
    acao:=1;
  if state=dsEdit then
    acao:=2;
  inherited;
end;

procedure TClienteCod.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  Estado:=2;
  AtualizaControles(True);
end;

procedure TClienteCod.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 try
  ECodigo.Clear;
 except
 end;
 try
  ECodigoFOR.KeyValue := 0;
 except
 end;
 try
  AtualizaControles(True);
   except
 end;

end;

function TClienteCod.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
    result:=true;
    if TQuery(Self).isEmpty then
    begin
       try
        ECodigo.Clear;
       except
       end;
       try
        ECodigoFOR.KeyValue := 0;;
       except
       end;
    end;
  Except
    result:=false;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
