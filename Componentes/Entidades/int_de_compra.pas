{ ****************************************************************** }
{                                                                    }
{   VCL component TInt_de_compra                                     }
{                                                                    }
{   Intencao de compra da Empresa                                    }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file c:\eletro guerra\classe\principal\item_de_compra.cd }
{   on 12 Jan 2002 at 0:05                                           }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Int_de_compra;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Variants;

type
  TInt_de_compra = class(TSQuery)
    private
      { Private fields of TInt_de_compra }
        { Storage for property CodigoCMP }
        FCodigoCMP : Integer;
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property Data }
        FData : Tdatetime;
        { Storage for property ECodigoCMP }
        FECodigoCMP : TEdit;
        { Storage for property EData }
        FEData : TMaskEdit;
        { Storage for property EOBS }
        FEOBS : TMemo;
        { Storage for property OBS }
        FOBS : String;

      { Private methods of TInt_de_compra }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCMP }
        function GetCodigoCMP : Integer;
        { Write method for property CodigoCMP }
        procedure SetCodigoCMP(Value : Integer);
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property Data }
        function GetData : Tdatetime;
        { Write method for property Data }
        procedure SetData(Value : Tdatetime);
        { Read method for property OBS }
        function GetOBS : String;
        { Write method for property OBS }
        procedure SetOBS(Value : String);

    protected
      { Protected fields of TInt_de_compra }

      { Protected methods of TInt_de_compra }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TInt_de_compra }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TInt_de_compra }
        { Altera um Abastecimento }
        procedure Alterar(CdCNC, CdCMP: Integer; PData, POBS: String);
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC,CdCMP:Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        { Insere um Abastecimento }
        function Inserir(CdCNC, CdCMP: Integer; PData, POBS: String):boolean;
        function InserirAuto:Boolean;
        { Localiza um abastecimeto }
        function LocalizarCod(CdCMP, CdCNC:Integer):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TInt_de_compra }
        { Código do Abastecimento }
        property CodigoCMP : Integer read GetCodigoCMP write SetCodigoCMP;
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        property Data : Tdatetime read GetData write SetData;
        property ECodigoCMP : TEdit read FECodigoCMP write FECodigoCMP;
        property EData : TMaskEdit read FEData write FEData;
        property EOBS : TMemo read FEOBS write FEOBS;
        property OBS : String read GetOBS write SetOBS;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TInt_de_compra with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TInt_de_compra]);
end;

{ Method to set variable and property values and create objects }
procedure TInt_de_compra.AutoInitialize;
begin
     Estado := 0;
     FECodigoCMP := nil;
     FEData := nil;
     FEOBS := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TInt_de_compra.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECodigoCMP then
        FECodigoCMP := nil;
     if AComponent = FEData then
        FEData := nil;
     if AComponent = FEOBS then
        FEOBS := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TInt_de_compra.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCMP }
function TInt_de_compra.GetCodigoCMP : Integer;
begin
  try
    Result := Self.fieldByName('CMP_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCMP }
procedure TInt_de_compra.SetCodigoCMP(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CMP_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CMP_CODIGO"!');
    end;
end;

{ Read method for property CodigoCNC }
function TInt_de_compra.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TInt_de_compra.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property Data }
function TInt_de_compra.GetData : Tdatetime;
begin
  try
    Result := Self.fieldByName('ICN_DATA').asDateTime;
  except
  end;
end;

{ Write method for property Data }
procedure TInt_de_compra.SetData(Value : Tdatetime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('INC_DATA').asDatetime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "INC_DATA"!');
  end;
end;

{ Read method for property OBS }
function TInt_de_compra.GetOBS : String;
begin
  try
    Result := Self.fieldByName('INC_OBSERVACAO').asString;
  except
    result:= ''
  end;
end;

{ Write method for property OBS }
procedure TInt_de_compra.SetOBS(Value : String);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('INC_OBSERVACAO').asString := Value;
  except
    ShowMessage('Não foi possível alterar o campo "INC_OBSERVACAO"!');
  end;
end;

{ Altera um Abastecimento }
procedure TInt_de_compra.Alterar(CdCNC, CdCMP: Integer; PData, POBS: String);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdCMP,CdCNC)) Then
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      edit;
      Data           := StrToDateTime(PData);
      OBS            := POBS;
      try
        Post;
      except
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TInt_de_compra.AlterarAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
    try
      edit;
      try
        Data := StrToDateTime(EData.Text);
      except
      end;
      try
         OBS := EOBS.Text;
      except
      end;

      try
        Post;
        Result:=True;
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TInt_de_compra.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
   EData.Enabled         :=Habilitar;
   EOBS.Enabled          :=Habilitar;

end;

procedure TInt_de_compra.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TInt_de_compra.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
   ECodigoCMP.Text           :=IntToStr(CodigoCMP);
   EData.Text                :=FormatDateTime('dd/mm/yyyy', Data);
   EOBS.Text                 :=OBS;
end;

constructor TInt_de_compra.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TInt_de_compra.Deletar(CdCNC,CdCMP:Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdCMP,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
      if TQuery(Self).isEmpty then
      begin
        try
         ECodigoCMP.Clear;
        except
        end;
        try
         EData.Clear;
        except
        end;
        try
         EOBS.Clear;
        except
        end;
      end;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TInt_de_compra.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TInt_de_compra.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod, cdcnc:Integer;
begin
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
    LocalizarCod(SCodigo,CodigoCNC);
  End;

  If Estado=2 then
  Begin
    cod:=codigoCMP;
    cdcnc:=codigoCNC;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

{ Insere um Abastecimento }
function TInt_de_compra.Inserir(CdCNC, CdCMP: Integer; PData, POBS: String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Cod: Integer;
begin
  if CdCMP=0 then
    Cod    := ProximoCodigo('CMP_CODIGO')
  else
    Cod      := CdCMP;
  If (localizarCod(Cod,CdCNC)) Then
  begin
    ShowMessage('Não foi possível inserir o registro corrente pois o mesmo já existe!');
    result:=false;
  end
  Else
  begin
      result := true;
      Insert;
      try
        CodigoCMP      := Cod;
        CodigoCNC      := CdCNC;
        Data           := StrToDateTime(PData);
        OBS            := POBS;
        try
          Post;
        except
          result := false;
          Cancel;
          ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
        end;
      except
        result := false;
        ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
      end;
  end;
end;

function TInt_de_compra.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Aux:TDataSetNotifyEvent;
begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
         codigoCNC   := CConfiguracao.CodigoCNC;
      except
      end;
      try
         Data := StrToDateTime(EData.Text);
      except
      end;
      try
         OBS := EOBS.Text;
      except
      end;

      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TInt_de_compra.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

{ Localiza um abastecimeto }
function TInt_de_compra.LocalizarCod(CdCMP, CdCNC:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CdCMP<>CodigoCMP) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO; CMP_CODIGO', vararrayof([CdCNC, CdCMP]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TInt_de_compra.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TInt_de_compra.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 ProximoCodigo('CMP_CODIGO');
 try
  EData.Clear;
 except
 end;
 try
  EOBS.Clear;
 except
 end;
  AtualizaControles(True);
  Estado:=1;
end;

function TInt_de_compra.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
