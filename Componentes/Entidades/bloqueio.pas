{ ****************************************************************** }
{                                                                    }
{   VCL component TBloqueio                                          }
{                                                                    }
{   Registro Bloqueio                                                }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file p:\eletro guerra\classe\principal\registro_bloqueio.cd }
{   on 10 Feb 2000 at 15:36                                          }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Bloqueio;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Dbtables, Dialogs, Db, Stdctrls, Mask, 
     Dbctrls, Configuracao;

type
  TBloqueio = class(TQuery)
    private
      { Private fields of TBloqueio }
        { Storage for property CNCTITULO }
        FCNCTITULO : Integer;
        { Storage for property CODTITULO }
        FCODTITULO : Integer;
        { Storage for property Data }
        FData : Tdate;

      { Private methods of TBloqueio }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CNCTITULO }
        function GetCNCTITULO : Integer;
        { Write method for property CNCTITULO }
        procedure SetCNCTITULO(Value : Integer);
        { Read method for property CODTITULO }
        function GetCODTITULO : Integer;
        { Write method for property CODTITULO }
        procedure SetCODTITULO(Value : Integer);
        { Read method for property Data }
        function GetData : Tdate;
        { Write method for property Data }
        procedure SetData(Value : Tdate);

    protected
      { Protected fields of TBloqueio }

      { Protected methods of TBloqueio }
        procedure Loaded; override;

    public
      { Public fields and properties of TBloqueio }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TBloqueio }
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CODTIT,CNCTIT:Integer);
        destructor Destroy; override;
        { Insere um Registro de Bloqueio }
        function Inserir(CNCTIT, CODTIT : integer;PData:TDate):boolean;
        { Localiza um cliente }
        function LocalizarCod(CdCOD,CdCNC:Integer):Boolean;
        function deletarauto:Boolean;

    published
      { Published properties of TBloqueio }
        property CNCTITULO : Integer read GetCNCTITULO write SetCNCTITULO;
        property CODTITULO : Integer read GetCODTITULO write SetCODTITULO;
        property Data : Tdate read GetData write SetData;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TBloqueio with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TBloqueio]);
end;

{ Method to set variable and property values and create objects }
procedure TBloqueio.AutoInitialize;
begin
     Estado := 0;
end; { of AutoInitialize }

{ Method to free any objects created by AutoInitialize }
procedure TBloqueio.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CNCTITULO }
function TBloqueio.GetCNCTITULO : Integer;
begin
  try
    Result := Self.fieldByName('BLQ_TITULO_CNC').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CNCTITULO }
procedure TBloqueio.SetCNCTITULO(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('BLQ_TITULO_CNC').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "BLQ_TITULO_CNC"!');
    end;
end;

{ Read method for property CODTITULO }
function TBloqueio.GetCODTITULO : Integer;
begin
  try
    Result := Self.fieldByName('BLQ_TITULO_COD').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CODTITULO }
procedure TBloqueio.SetCODTITULO(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('BLQ_TITULO_COD').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "BLQ_TITULO_COD"!');
    end;
end;

{ Read method for property Data }
function TBloqueio.GetData : Tdate;
begin
  try
    Result := Self.fieldByName('BLQ_DATA').asDateTime;
  except
    result:= 0
  end;
end;

{ Write method for property Data }
procedure TBloqueio.SetData(Value : Tdate);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('BLQ_DATA').asDatetime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "BLQ_DATA"!');
  end;
end;

constructor TBloqueio.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TBloqueio.Deletar(CODTIT,CNCTIT:Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CODTIT,CNCTIT)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TBloqueio.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

{ Insere um Registro de Bloqueio }
function TBloqueio.Inserir(CNCTIT, CODTIT : integer;PData:TDate):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Cod:Integer;
begin
  If (localizarCod(CNCTIT,CODTIT)) Then
  begin
    ShowMessage('Não foi possível inserir o registro corrente pois o mesmo já existe!');
    result:=false;
  end
  Else
  begin
      result := true;
      Insert;
      try
        CNCTITULO           := CNCTIT;
        CODTITULO           := CODTIT;
        DATA                := PDATA;
        try
          Post;
        except
          Cancel;
          ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
        end;
      except
        ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
      end;
  end;
end;

procedure TBloqueio.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

{ Localiza um cliente }
function TBloqueio.LocalizarCod(CdCOD,CdCNC:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If locate('BLQ_TITULO_CNC;BLQ_TITULO_COD', vararrayof([CdCOD, CdCNC]), []) Then
    Result:=True
  else
    Result:=False
end;

function TBloqueio.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
