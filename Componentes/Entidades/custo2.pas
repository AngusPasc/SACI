{ ****************************************************************** }
{                                                                    }
{   VCL component TCusto                                             }
{                                                                    }
{   Tabela de Custo                                                  }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file c:\eletro guerra\classe\principal\custo.cd }
{   on 12 Jan 2002 at 0:12                                           }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Custo;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Configuracao, Dbgrids, Funcoes, Variants;

type
  TCusto = class(TSQuery)
    private
      { Private fields of TCusto }
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoCUS }
        FCodigoCUS : Integer;
        { Storage for property CodigoFOR }
        FCodigoFOR : Integer;
        { Storage for property CodigoPCP }
        FCodigoPCP : Integer;
        { Storage for property CodigoPRD }
        FCodigoPRD : Integer;
        { Storage for property CodigoUSU }
        FCodigoUSU : Integer;
        { Storage for property DataAlterado }
        FDataAlterado : TDateTime;
        { Storage for property DataCadastro }
        FDataCadastro : TDateTime;
        { Storage for property ECodigoCUS }
        FECodigoCUS : TEdit;
        { Storage for property ECodigoFOR }
        FECodigoFOR : TEdit;
        { Storage for property ECodigoPCP }
        FECodigoPCP : TEdit;
        { Storage for property ECodigoPRD }
        FECodigoPRD : TEdit;
        { Storage for property EDataAlterado }
        FEDataAlterado : TMaskEdit;
        { Storage for property EDataCadastro }
        FEDataCadastro : TMaskEdit;
        { Storage for property EDbgrid }
        FEDbgrid : TDBGrid;
        { Storage for property EFrete }
        FEFrete : TEdit;
        { Storage for property EICMS }
        FEICMS : TEdit;
        { Storage for property EIPI }
        FEIPI : TEdit;
        { Storage for property EQuantidade }
        FEQuantidade : TEdit;
        { Storage for property EValorCompra }
        FEValorCompra : TEdit;
        { Storage for property EValorCusto }
        FEValorCusto : TEdit;
        { Storage for property EValorMedio }
        FEValorMedio : TEdit;
        { Storage for property Frete }
        FFrete : Double;
        { Storage for property ICMS }
        FICMS : Double;
        { Storage for property IPI }
        FIPI : Double;
        { Storage for property PedidoCNC }
        FPedidoCNC : Integer;
        { Storage for property PrecoCompra }
        FPrecoCompra : Double;
        { Storage for property PrecoCusto }
        FPrecoCusto : Double;
        { Storage for property PrecoMedio }
        FPrecoMedio : Double;
        { Storage for property Quantidade }
        FQuantidade : Double;

      { Private methods of TCusto }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoCUS }
        function GetCodigoCUS : Integer;
        { Write method for property CodigoCUS }
        procedure SetCodigoCUS(Value : Integer);
        { Read method for property CodigoFOR }
        function GetCodigoFOR : Integer;
        { Write method for property CodigoFOR }
        procedure SetCodigoFOR(Value : Integer);
        { Read method for property CodigoPCP }
        function GetCodigoPCP : Integer;
        { Write method for property CodigoPCP }
        procedure SetCodigoPCP(Value : Integer);
        { Read method for property CodigoPRD }
        function GetCodigoPRD : Integer;
        { Write method for property CodigoPRD }
        procedure SetCodigoPRD(Value : Integer);
        { Read method for property CodigoUSU }
        function GetCodigoUSU : Integer;
        { Write method for property CodigoUSU }
        procedure SetCodigoUSU(Value : Integer);
        { Read method for property DataAlterado }
        function GetDataAlterado : TDateTime;
        { Write method for property DataAlterado }
        procedure SetDataAlterado(Value : TDateTime);
        { Read method for property DataCadastro }
        function GetDataCadastro : TDateTime;
        { Write method for property DataCadastro }
        procedure SetDataCadastro(Value : TDateTime);
        { Read method for property EFrete }
        function GetEFrete : TEdit;
        { Write method for property EFrete }
        procedure SetEFrete(Value : TEdit);
        { Read method for property Frete }
        function GetFrete : Double;
        { Write method for property Frete }
        procedure SetFrete(Value : Double);
        { Read method for property ICMS }
        function GetICMS : Double;
        { Write method for property ICMS }
        procedure SetICMS(Value : Double);
        { Read method for property IPI }
        function GetIPI : Double;
        { Write method for property IPI }
        procedure SetIPI(Value : Double);
        { Read method for property PedidoCNC }
        function GetPedidoCNC : Integer;
        { Write method for property PedidoCNC }
        procedure SetPedidoCNC(Value : Integer);
        { Read method for property PrecoCompra }
        function GetPrecoCompra : Double;
        { Write method for property PrecoCompra }
        procedure SetPrecoCompra(Value : Double);
        { Read method for property PrecoCusto }
        function GetPrecoCusto : Double;
        { Write method for property PrecoCusto }
        procedure SetPrecoCusto(Value : Double);
        { Read method for property PrecoMedio }
        function GetPrecoMedio : Double;
        { Write method for property PrecoMedio }
        procedure SetPrecoMedio(Value : Double);
        { Read method for property Quantidade }
        function GetQuantidade : Double;
        { Write method for property Quantidade }
        procedure SetQuantidade(Value : Double);

    protected
      { Protected fields of TCusto }

      { Protected methods of TCusto }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;

    public
      { Public fields and properties of TCusto }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TCusto }
        { Altera uma Desconto }
        function Alterar(CdCUS,CdPCP,CdCNCPCP,CdPRD,CdFOR: integer;PQtd,PCompra,PCusto,PMedio,PFrete,PICMS,PIPI:double):boolean;
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        function Deletar(CdCUS:Integer):Boolean;
        destructor Destroy; override;
        function FinalizaEdicao:Boolean;
        function Inserir(CdCUS,CdPCP,CdCNCPCP,CdPRD,CdFOR: integer;PQtd,PCompra,PCusto,PMedio,PFrete,PICMS,PIPI:double):boolean;
        function InserirAuto:Boolean;
        { Localiza um Custo }
        function LocalizarCod(CdCUS:Integer):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TCusto }
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        property CodigoCUS : Integer read GetCodigoCUS write SetCodigoCUS;
        property CodigoFOR : Integer read GetCodigoFOR write SetCodigoFOR;
        property CodigoPCP : Integer read GetCodigoPCP write SetCodigoPCP;
        property CodigoPRD : Integer read GetCodigoPRD write SetCodigoPRD;
        property CodigoUSU : Integer read GetCodigoUSU write SetCodigoUSU;
        property DataAlterado : TDateTime
             read GetDataAlterado write SetDataAlterado;
        property DataCadastro : TDateTime
             read GetDataCadastro write SetDataCadastro;
        property ECodigoCUS : TEdit read FECodigoCUS write FECodigoCUS;
        property ECodigoFOR : TEdit read FECodigoFOR write FECodigoFOR;
        property ECodigoPCP : TEdit read FECodigoPCP write FECodigoPCP;
        property ECodigoPRD : TEdit read FECodigoPRD write FECodigoPRD;
        property EDataAlterado : TMaskEdit
             read FEDataAlterado write FEDataAlterado;
        property EDataCadastro : TMaskEdit
             read FEDataCadastro write FEDataCadastro;
        property EDbgrid : TDBGrid read FEDbgrid write FEDbgrid;
        property EFrete : TEdit read GetEFrete write SetEFrete;
        property EICMS : TEdit read FEICMS write FEICMS;
        property EIPI : TEdit read FEIPI write FEIPI;
        property EQuantidade : TEdit read FEQuantidade write FEQuantidade;
        property EValorCompra : TEdit read FEValorCompra write FEValorCompra;
        property EValorCusto : TEdit read FEValorCusto write FEValorCusto;
        property EValorMedio : TEdit read FEValorMedio write FEValorMedio;
        property Frete : Double read GetFrete write SetFrete;
        property ICMS : Double read GetICMS write SetICMS;
        property IPI : Double read GetIPI write SetIPI;
        property PedidoCNC : Integer read GetPedidoCNC write SetPedidoCNC;
        property PrecoCompra : Double read GetPrecoCompra write SetPrecoCompra;
        property PrecoCusto : Double read GetPrecoCusto write SetPrecoCusto;
        property PrecoMedio : Double read GetPrecoMedio write SetPrecoMedio;
        property Quantidade : Double read GetQuantidade write SetQuantidade;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TCusto with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TCusto]);
end;

{ Method to set variable and property values and create objects }
procedure TCusto.AutoInitialize;
begin
     Estado := 0;
     FECodigoCUS := nil;
     FECodigoFOR := nil;
     FECodigoPCP := nil;
     FECodigoPRD := nil;
     FEDataAlterado := nil;
     FEDataCadastro := nil;
     FEDbgrid := nil;
     FEFrete := nil;
     FEICMS := nil;
     FEIPI := nil;
     FEQuantidade := nil;
     FEValorCompra := nil;
     FEValorCusto := nil;
     FEValorMedio := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TCusto.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECodigoCUS then
        FECodigoCUS := nil;
     if AComponent = FECodigoFOR then
        FECodigoFOR := nil;
     if AComponent = FECodigoPCP then
        FECodigoPCP := nil;
     if AComponent = FECodigoPRD then
        FECodigoPRD := nil;
     if AComponent = FEDataAlterado then
        FEDataAlterado := nil;
     if AComponent = FEDataCadastro then
        FEDataCadastro := nil;
     if AComponent = FEDbgrid then
        FEDbgrid := nil;
     if AComponent = FEFrete then
        FEFrete := nil;
     if AComponent = FEICMS then
        FEICMS := nil;
     if AComponent = FEIPI then
        FEIPI := nil;
     if AComponent = FEQuantidade then
        FEQuantidade := nil;
     if AComponent = FEValorCompra then
        FEValorCompra := nil;
     if AComponent = FEValorCusto then
        FEValorCusto := nil;
     if AComponent = FEValorMedio then
        FEValorMedio := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TCusto.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCNC }
function TCusto.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TCusto.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoCUS }
function TCusto.GetCodigoCUS : Integer;
begin
  try
    Result := Self.fieldByName('CUS_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCUS }
procedure TCusto.SetCodigoCUS(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_CODIGO"!');
    end;
end;

{ Read method for property CodigoFOR }
function TCusto.GetCodigoFOR : Integer;
begin
  try
    Result := Self.fieldByName('FOR_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoFOR }
procedure TCusto.SetCodigoFOR(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('FOR_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "FOR_CODIGO"!');
    end;
end;

{ Read method for property CodigoPCP }
function TCusto.GetCodigoPCP : Integer;
begin
  try
    Result := Self.fieldByName('PCP_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoPCP }
procedure TCusto.SetCodigoPCP(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('PCP_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "PCP_CODIGO"!');
    end;
end;

{ Read method for property CodigoPRD }
function TCusto.GetCodigoPRD : Integer;
begin
  try
    Result := Self.fieldByName('PRD_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoPRD }
procedure TCusto.SetCodigoPRD(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('PRD_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "PRD_CODIGO"!');
    end;
end;

{ Read method for property CodigoUSU }
function TCusto.GetCodigoUSU : Integer;
begin
  try
    Result := Self.fieldByName('USU_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoUSU }
procedure TCusto.SetCodigoUSU(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('USU_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "USU_CODIGO"!');
    end;
end;

{ Read method for property DataAlterado }
function TCusto.GetDataAlterado : TDateTime;
begin
  try
    Result := Self.fieldByName('CUS_DT_ALTERADO').asDateTime;
  except
    Result := 0;
  end;
end;

{ Write method for property DataAlterado }
procedure TCusto.SetDataAlterado(Value : TDateTime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('CUS_DT_ALTERADO').asDatetime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "CUS_DT_ALTERADO"!');
  end;
end;

{ Read method for property DataCadastro }
function TCusto.GetDataCadastro : TDateTime;
begin
  try
    Result := Self.fieldByName('CUS_DT_CADASTRO').asDateTime;
  except
    Result := 0;
  end;
end;

{ Write method for property DataCadastro }
procedure TCusto.SetDataCadastro(Value : TDateTime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('CUS_DT_CADASTRO').asDatetime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "CUS_DT_CADASTRO"!');
  end;
end;

{ Read method for property EFrete }
function TCusto.GetEFrete : TEdit;
begin
     Result := FEFrete;
end;

{ Write method for property EFrete }
procedure TCusto.SetEFrete(Value : TEdit);
begin
     FEFrete := Value;
end;

{ Read method for property Frete }
function TCusto.GetFrete : Double;
begin
  try
    Result := Self.fieldByName('CUS_FRETE').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property Frete }
procedure TCusto.SetFrete(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_FRETE').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_FRETE"!');
    end;
end;

{ Read method for property ICMS }
function TCusto.GetICMS : Double;
begin
  try
    Result := Self.fieldByName('CUS_ICMS').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property ICMS }
procedure TCusto.SetICMS(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_ICMS').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_ICMS"!');
    end;
end;

{ Read method for property IPI }
function TCusto.GetIPI : Double;
begin
  try
    Result := Self.fieldByName('CUS_IPI').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property IPI }
procedure TCusto.SetIPI(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_IPI').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_IPI"!');
    end;
end;

{ Read method for property PedidoCNC }
function TCusto.GetPedidoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_PEDIDO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property PedidoCNC }
procedure TCusto.SetPedidoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_PEDIDO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_PEDIDO"!');
    end;
end;

{ Read method for property PrecoCompra }
function TCusto.GetPrecoCompra : Double;
begin
  try
    Result := Self.fieldByName('CUS_VALOR_COMPRA').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property PrecoCompra }
procedure TCusto.SetPrecoCompra(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_VALOR_COMPRA').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_VALOR_COMPRA"!');
    end;
end;

{ Read method for property PrecoCusto }
function TCusto.GetPrecoCusto : Double;
begin
  try
    Result := Self.fieldByName('CUS_VALOR_CUSTO').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property PrecoCusto }
procedure TCusto.SetPrecoCusto(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_VALOR_CUSTO').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_VALOR_CUSTO"!');
    end;
end;

{ Read method for property PrecoMedio }
function TCusto.GetPrecoMedio : Double;
begin
  try
    Result := Self.fieldByName('CUS_VALOR_MEDIO').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property PrecoMedio }
procedure TCusto.SetPrecoMedio(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_VALOR_MEDIO').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_VALOR_MEDIO"!');
    end;
end;

{ Read method for property Quantidade }
function TCusto.GetQuantidade : Double;
begin
  try
    Result := Self.fieldByName('CUS_QUANTIDADE').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property Quantidade }
procedure TCusto.SetQuantidade(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CUS_QUANTIDADE').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CUS_QUANTIDADE"!');
    end;
end;

{ Altera uma Desconto }
function TCusto.Alterar(CdCUS,CdPCP,CdCNCPCP,CdPRD,CdFOR: integer;PQtd,PCompra,PCusto,PMedio,PFrete,PICMS,PIPI:double):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdCUS)) Then
  begin
    result := false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      CodigoUSU      := CConfiguracao.CodigoUSU;
      DataAlterado   := CConfiguracao.DataHora;
      CodigoPCP      := CdPCP;
      PedidoCNC      := CdCNCPCP;
      CodigoPRD      := CdPRD;
      CodigoFOR      := CdFOR;
      Quantidade     := PQtd;
      PrecoCompra    := PCompra;
      PrecoCusto     := PCusto;
      PrecoMedio     := PMedio;
      IPI            := PIPI;
      ICMS           := PICMS;
      Frete          := PFrete;

      try
        Post;
        Result := True;

      except
        result := false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result := false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TCusto.AlterarAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
//var
//  CUS:integer;
begin
//    CUS:=StrToInt(ECodigoCUS.Text);
    Result := False;
{    try
      edit;
      try
        CodigoUSU := CConfiguracao.CodigoUSU;
      except
      end;
      try
        DataAlterado := StrToDateTime(EDataAlterado.Text);
      except
      end;
      try
        Post;
        Result:=True;
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
}
end;

procedure TCusto.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
{  Try
    EDbgrid.Enabled          :=not Habilitar;
  except
  end;
}
end;

procedure TCusto.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TCusto.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 try
   ECodigoCUS.Text           :=IntToStr(CodigoCUS);
 except
 end;
 try
   if DataCadastro=0 then
     EDataCadastro.Clear
   else
     EDataCadastro.Text          :=FormatDateTime('dd/mm/yyyy hh:mm', DataCadastro);
   except
 end;
 try
   if DataAlterado=0 then
     EDataAlterado.Clear
   else
     EDataAlterado.Text          :=FormatDateTime('dd/mm/yyyy hh:mm', DataAlterado);
 except
 end;
end;

constructor TCusto.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

function TCusto.Deletar(CdCUS:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdCUS)) Then
  Begin
    Result := False;
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      if Delete then
      Begin
        Result := True;
        if TQuery(Self).isEmpty then
        begin
          try
            ECodigoCUS.Clear;
          except
          end;
          try
            EDataCadastro.Clear;
          except
          end;
          try
            EDataAlterado.Clear;
          except
          end;
        end;
      end
      else
        Result := False;
    Except
      Result := False;
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TCusto.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

function TCusto.FinalizaEdicao:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod:Integer;
  mensagem:string;
  Aux:TDataSetNotifyEvent;
begin
  mensagem:='';
  If mensagem <>'' Then
  Begin
    Result := False;
    ShowMessage(mensagem);
  end
  else
  Begin
    Aux:=AfterScroll;
    AfterScroll:=Nil;
    If Estado=1 then
    Begin
      if Inserirauto then
      Begin
        Result := True;
        close;
        open;
        LocalizarCod(SCodigo);
        CarregaDados;
        Estado:=0;
        AtualizaControles(False);
      end
      else
        Result := False;
    End
    Else If Estado=2 then
    Begin
      cod:=codigoCUS;
      if Alterarauto then
      Begin
        Result := True;
        close;
        open;
        LocalizarCod(cod);
        CarregaDados;
        Estado:=0;
        AtualizaControles(False);
      end
      else
        Result := False;
    End
    else
      Result := False;
    AfterScroll:=aux;
  end;
end;

function TCusto.Inserir(CdCUS,CdPCP,CdCNCPCP,CdPRD,CdFOR: integer;PQtd,PCompra,PCusto,PMedio,PFrete,PICMS,PIPI:double):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Cod: Integer;
begin
  if CdCUS=0 then
    Cod    := ProximoCodigo('CUS_CODIGO')
  else
    Cod      := CdCUS;
  If (localizarCod(Cod)) Then
  begin
    ShowMessage('Não foi possível inserir o registro corrente pois o mesmo já existe!');
    result:=false;
  end
  Else
  begin
     if Estado=3 then
     begin
       result:=true;
       exit;
     end;
     Insert;
     try
       CodigoCUS      := Cod;
       CodigoUSU      := CConfiguracao.CodigoUSU;
       DataCadastro   := CConfiguracao.DataHora;
       CodigoPCP      := CdPCP;
       PedidoCNC      := CdCNCPCP;
       CodigoPRD      := CdPRD;
       CodigoFOR      := CdFOR;
       Quantidade     := PQtd;
       PrecoCompra    := PCompra;
       PrecoCusto     := PCusto;
       PrecoMedio     := PMedio;
       IPI            := PIPI;
       ICMS           := PICMS;
       Frete          := PFrete;

       try
         Post;
         result := true;

       except
         result := false;
         Cancel;
         ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
       end;
     except
       result := false;
       ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
     end;
  end;
end;

function TCusto.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
begin
  Result := False;
{    try
      append;
      try
        CodigoCOT   := SCodigo;
      except
      end;
      try
        codigoCNC   := CConfiguracao.CodigoCNC;
      except
      end;
      try
        codigoUSU   := CConfiguracao.CodigoUSU;
      except
      end;
      try
        Mes         := StrToInt(EMes.Text);
      except
      end;
      try
        Ano         := StrToInt(EAno.Text);
      except
      end;
      try
        DiasUteis   := StrToInt(EDiasUteis.Text);
      except
      end;
      try
        DiasNUteis  := StrToInt(EDiasNUteis.Text);
      except
      end;
      try
        DataCadastro := StrToDateTime(EDataCadastro.Text);
      except
      end;
      try
        Post;
        result:=True;

      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
}
end;

{ Localiza um Custo }
function TCusto.LocalizarCod(CdCUS:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CdCUS<>CodigoCUS) Then
    If locate('CUS_CODIGO', CdCUS, []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TCusto.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  Estado:=2;
  AtualizaControles(True);
  try
    EDataAlterado.Text:=formatDateTime('dd/mm/yyyy hh:mm',CConfiguracao.DataHora);
  except
  end;
end;

procedure TCusto.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  ProximoCodigo('CUS_CODIGO');
  try
    EDataCadastro.Text:=formatDateTime('dd/mm/yyyy hh:mm',CConfiguracao.DataHora);
  except
  end;
  try
    EDataAlterado.Clear;
  except
  end;
  Estado:=1;
  AtualizaControles(True);
end;

function TCusto.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Result := Delete;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
