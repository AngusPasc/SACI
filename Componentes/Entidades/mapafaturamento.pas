{ ****************************************************************** }
{                                                                    }
{   VCL component TMapaFaturamento                                   }
{                                                                    }
{   Mapa de Faturamento dos Vendedores                               }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file p:\eletro guerra\classe\principal\mapafaturamento.cd }
{   on 6 Dec 2002 at 16:31                                           }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit MapaFaturamento;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Configuracao, Dbgrids, Funcoes, Extctrls, 
     Variants;

type
  TMapaFaturamento = class(TSQuery)
    private
      { Private fields of TMapaFaturamento }
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoFUN }
        FCodigoFUN : Integer;
        { Storage for property CodigoMAP }
        FCodigoMAP : Integer;
        { Storage for property CodigoUSU }
        FCodigoUSU : Integer;
        { Storage for property DataAlterado }
        FDataAlterado : TDateTime;
        { Storage for property DataCadastro }
        FDataCadastro : TDateTime;
        { Storage for property ECodigoFUN }
        FECodigoFUN : TEdit;
        { Storage for property ECodigoMAP }
        FECodigoMAP : TEdit;
        { Storage for property ECodigoUSU }
        FECodigoUSU : TEdit;
        { Storage for property EObs }
        FEObs : TEdit;
        { Storage for property EQtdCadastros }
        FEQtdCadastros : TEdit;
        { Storage for property EQtdHoras }
        FEQtdHoras : TEdit;
        { Storage for property EQtdLigacoes }
        FEQtdLigacoes : TEdit;
        { Storage for property EQtdPedidos }
        FEQtdPedidos : TEdit;
        { Storage for property EQtdProdutos }
        FEQtdProdutos : TEdit;
        { Storage for property EQtdRetornos }
        FEQtdRetornos : TEdit;
        { Storage for property ESituacao }
        FESituacao : TComboBox;
        { Storage for property ETotalDevolvido }
        FETotalDevolvido : TEdit;
        { Storage for property ETotalFaturado }
        FETotalFaturado : TEdit;
        { Storage for property Obs }
        FObs : String;
        { Storage for property QtdCadastros }
        FQtdCadastros : Integer;
        { Storage for property QtdHoras }
        FQtdHoras : Integer;
        { Storage for property QtdLigacoes }
        FQtdLigacoes : Integer;
        { Storage for property QtdPedidos }
        FQtdPedidos : Integer;
        { Storage for property QtdProdutos }
        FQtdProdutos : Integer;
        { Storage for property QtdRetornos }
        FQtdRetornos : Integer;
        { Storage for property Situacao }
        FSituacao : Integer;
        { Storage for property TotalDevolvido }
        FTotalDevolvido : Double;
        { Storage for property TotalFaturado }
        FTotalFaturado : Double;

      { Private methods of TMapaFaturamento }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoFUN }
        function GetCodigoFUN : Integer;
        { Write method for property CodigoFUN }
        procedure SetCodigoFUN(Value : Integer);
        { Read method for property CodigoMAP }
        function GetCodigoMAP : Integer;
        { Write method for property CodigoMAP }
        procedure SetCodigoMAP(Value : Integer);
        { Read method for property CodigoUSU }
        function GetCodigoUSU : Integer;
        { Write method for property CodigoUSU }
        procedure SetCodigoUSU(Value : Integer);
        { Read method for property DataAlterado }
        function GetDataAlterado : TDateTime;
        { Write method for property DataAlterado }
        procedure SetDataAlterado(Value : TDateTime);
        { Read method for property DataCadastro }
        function GetDataCadastro : TDateTime;
        { Write method for property DataCadastro }
        procedure SetDataCadastro(Value : TDateTime);
        { Read method for property Obs }
        function GetObs : String;
        { Write method for property Obs }
        procedure SetObs(Value : String);
        { Read method for property QtdCadastros }
        function GetQtdCadastros : Integer;
        { Write method for property QtdCadastros }
        procedure SetQtdCadastros(Value : Integer);
        { Read method for property QtdHoras }
        function GetQtdHoras : Integer;
        { Write method for property QtdHoras }
        procedure SetQtdHoras(Value : Integer);
        { Read method for property QtdLigacoes }
        function GetQtdLigacoes : Integer;
        { Write method for property QtdLigacoes }
        procedure SetQtdLigacoes(Value : Integer);
        { Read method for property QtdPedidos }
        function GetQtdPedidos : Integer;
        { Write method for property QtdPedidos }
        procedure SetQtdPedidos(Value : Integer);
        { Read method for property QtdProdutos }
        function GetQtdProdutos : Integer;
        { Write method for property QtdProdutos }
        procedure SetQtdProdutos(Value : Integer);
        { Read method for property QtdRetornos }
        function GetQtdRetornos : Integer;
        { Write method for property QtdRetornos }
        procedure SetQtdRetornos(Value : Integer);
        { Read method for property Situacao }
        function GetSituacao : Integer;
        { Write method for property Situacao }
        procedure SetSituacao(Value : Integer);
        { Read method for property TotalDevolvido }
        function GetTotalDevolvido : Double;
        { Write method for property TotalDevolvido }
        procedure SetTotalDevolvido(Value : Double);
        { Read method for property TotalFaturado }
        function GetTotalFaturado : Double;
        { Write method for property TotalFaturado }
        procedure SetTotalFaturado(Value : Double);

    protected
      { Protected fields of TMapaFaturamento }
        FEtiquetas : TextFile;

      { Protected methods of TMapaFaturamento }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;

    public
      { Public fields and properties of TMapaFaturamento }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TMapaFaturamento }
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        function Deletar(CdCNC,CDMAP:Integer):Boolean;
        destructor Destroy; override;
        function FinalizaEdicao:Boolean;
        function InserirAuto:Boolean;
        { Localiza um Produto }
        function LocalizarCod(CdCNC, CDMAP:Integer):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TMapaFaturamento }
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        property CodigoFUN : Integer read GetCodigoFUN write SetCodigoFUN;
        property CodigoMAP : Integer read GetCodigoMAP write SetCodigoMAP;
        property CodigoUSU : Integer read GetCodigoUSU write SetCodigoUSU;
        property DataAlterado : TDateTime
             read GetDataAlterado write SetDataAlterado;
        property DataCadastro : TDateTime
             read GetDataCadastro write SetDataCadastro;
        property ECodigoFUN : TEdit read FECodigoFUN write FECodigoFUN;
        property ECodigoMAP : TEdit read FECodigoMAP write FECodigoMAP;
        property ECodigoUSU : TEdit read FECodigoUSU write FECodigoUSU;
        property EObs : TEdit read FEObs write FEObs;
        property EQtdCadastros : TEdit
             read FEQtdCadastros write FEQtdCadastros;
        property EQtdHoras : TEdit read FEQtdHoras write FEQtdHoras;
        property EQtdLigacoes : TEdit read FEQtdLigacoes write FEQtdLigacoes;
        property EQtdPedidos : TEdit read FEQtdPedidos write FEQtdPedidos;
        property EQtdProdutos : TEdit read FEQtdProdutos write FEQtdProdutos;
        property EQtdRetornos : TEdit read FEQtdRetornos write FEQtdRetornos;
        property ESituacao : TComboBox read FESituacao write FESituacao;
        property ETotalDevolvido : TEdit
             read FETotalDevolvido write FETotalDevolvido;
        property ETotalFaturado : TEdit
             read FETotalFaturado write FETotalFaturado;
        property Obs : String read GetObs write SetObs;
        property QtdCadastros : Integer
             read GetQtdCadastros write SetQtdCadastros;
        property QtdHoras : Integer read GetQtdHoras write SetQtdHoras;
        property QtdLigacoes : Integer
             read GetQtdLigacoes write SetQtdLigacoes;
        property QtdPedidos : Integer read GetQtdPedidos write SetQtdPedidos;
        property QtdProdutos : Integer
             read GetQtdProdutos write SetQtdProdutos;
        property QtdRetornos : Integer
             read GetQtdRetornos write SetQtdRetornos;
        property Situacao : Integer read GetSituacao write SetSituacao;
        property TotalDevolvido : Double
             read GetTotalDevolvido write SetTotalDevolvido;
        property TotalFaturado : Double
             read GetTotalFaturado write SetTotalFaturado;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TMapaFaturamento with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TMapaFaturamento]);
end;

{ Method to set variable and property values and create objects }
procedure TMapaFaturamento.AutoInitialize;
begin
     Estado := 0;
     FECodigoFUN := nil;
     FECodigoMAP := nil;
     FECodigoUSU := nil;
     FEObs := nil;
     FEQtdCadastros := nil;
     FEQtdHoras := nil;
     FEQtdLigacoes := nil;
     FEQtdPedidos := nil;
     FEQtdProdutos := nil;
     FEQtdRetornos := nil;
     FESituacao := nil;
     FETotalDevolvido := nil;
     FETotalFaturado := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TMapaFaturamento.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECodigoFUN then
        FECodigoFUN := nil;
     if AComponent = FECodigoMAP then
        FECodigoMAP := nil;
     if AComponent = FECodigoUSU then
        FECodigoUSU := nil;
     if AComponent = FEObs then
        FEObs := nil;
     if AComponent = FEQtdCadastros then
        FEQtdCadastros := nil;
     if AComponent = FEQtdHoras then
        FEQtdHoras := nil;
     if AComponent = FEQtdLigacoes then
        FEQtdLigacoes := nil;
     if AComponent = FEQtdPedidos then
        FEQtdPedidos := nil;
     if AComponent = FEQtdProdutos then
        FEQtdProdutos := nil;
     if AComponent = FEQtdRetornos then
        FEQtdRetornos := nil;
     if AComponent = FESituacao then
        FESituacao := nil;
     if AComponent = FETotalDevolvido then
        FETotalDevolvido := nil;
     if AComponent = FETotalFaturado then
        FETotalFaturado := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TMapaFaturamento.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCNC }
function TMapaFaturamento.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TMapaFaturamento.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoFUN }
function TMapaFaturamento.GetCodigoFUN : Integer;
begin
  try
    Result := Self.fieldByName('FUN_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoFUN }
procedure TMapaFaturamento.SetCodigoFUN(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('FUN_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "FUN_CODIGO"!');
    end;
end;

{ Read method for property CodigoMAP }
function TMapaFaturamento.GetCodigoMAP : Integer;
begin
  try
    Result := Self.fieldByName('MAP_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoMAP }
procedure TMapaFaturamento.SetCodigoMAP(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_CODIGO"!');
    end;
end;


{ Read method for property CodigoUSU }
function TMapaFaturamento.GetCodigoUSU : Integer;
begin
  try
    Result := Self.fieldByName('USU_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoUSU }
procedure TMapaFaturamento.SetCodigoUSU(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('USU_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "USU_CODIGO"!');
    end;
end;

{ Read method for property DataAlterado }
function TMapaFaturamento.GetDataAlterado : TDateTime;
begin
  try
    Result := Self.fieldByName('MAP_DT_ALTERADO').asDateTime;
  except
    result:= 0;
  end;
end;

{ Write method for property DataAlterado }
procedure TMapaFaturamento.SetDataAlterado(Value : TDateTime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('MAP_DT_ALTERADO').asDateTime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "MAP_DT_ALTERADO"!');
  end;
end;

{ Read method for property DataCadastro }
function TMapaFaturamento.GetDataCadastro : TDateTime;
begin
  try
    Result := Self.fieldByName('MAP_DT_CADASTRO').asDateTime;
  except
    result:= 0;
  end;
end;

{ Write method for property DataCadastro }
procedure TMapaFaturamento.SetDataCadastro(Value : TDateTime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('MAP_DT_CADASTRO').asDateTime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "MAP_DT_CADASTRO"!');
  end;
end;

{ Read method for property Obs }
function TMapaFaturamento.GetObs : String;
begin
  try
    Result := Self.fieldByName('MAP_OBSERVACAO').asString;
  except
    result:= ''
  end;
end;

{ Write method for property Obs }
procedure TMapaFaturamento.SetObs(Value : String);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('MAP_OBSERVACAO').asString := Value;
  except
    ShowMessage('Não foi possível alterar o campo "MAP_OBSERVACAO"!');
  end;
end;

{ Read method for property QtdCadastros }
function TMapaFaturamento.GetQtdCadastros : Integer;
begin
  try
    Result := Self.fieldByName('MAP_QTD_CADASTROS').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property QtdCadastros }
procedure TMapaFaturamento.SetQtdCadastros(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_QTD_CADASTROS').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_QTD_CADASTROS"!');
    end;
end;

{ Read method for property QtdHoras }
function TMapaFaturamento.GetQtdHoras : Integer;
begin
  try
    Result := Self.fieldByName('MAP_QTD_HORAS').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property QtdHoras }
procedure TMapaFaturamento.SetQtdHoras(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_QTD_HORAS').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_QTD_HORAS"!');
    end;
end;

{ Read method for property QtdLigacoes }
function TMapaFaturamento.GetQtdLigacoes : Integer;
begin
  try
    Result := Self.fieldByName('MAP_QTD_LIGACOES').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property QtdLigacoes }
procedure TMapaFaturamento.SetQtdLigacoes(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_QTD_LIGACOES').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_QTD_LIGACOES"!');
    end;
end;

{ Read method for property QtdPedidos }
function TMapaFaturamento.GetQtdPedidos : Integer;
begin
  try
    Result := Self.fieldByName('MAP_QTD_PEDIDOS').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property QtdPedidos }
procedure TMapaFaturamento.SetQtdPedidos(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_QTD_PEDIDOS').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_QTD_PEDIDOS"!');
    end;
end;

{ Read method for property QtdProdutos }
function TMapaFaturamento.GetQtdProdutos : Integer;
begin
  try
    Result := Self.fieldByName('MAP_QTD_PRODUTOS').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property QtdProdutos }
procedure TMapaFaturamento.SetQtdProdutos(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_QTD_PRODUTOS').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_QTD_PRODUTOS"!');
    end;
end;

{ Read method for property QtdRetornos }
function TMapaFaturamento.GetQtdRetornos : Integer;
begin
  try
    Result := Self.fieldByName('MAP_QTD_RETORNOS').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property QtdRetornos }
procedure TMapaFaturamento.SetQtdRetornos(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_QTD_RETORNOS').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_QTD_RETORNOS"!');
    end;
end;

{ Read method for property Situacao }
function TMapaFaturamento.GetSituacao : Integer;
begin
  try
    Result := Self.fieldByName('MAP_SITUACAO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property Situacao }
procedure TMapaFaturamento.SetSituacao(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_SITUACAO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_SITUACAO"!');
    end;
end;

{ Read method for property TotalDevolvido }
function TMapaFaturamento.GetTotalDevolvido : Double;
begin
  try
    Result := Self.fieldByName('MAP_TOTAL_DEVOLVIDO').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property TotalDevolvido }
procedure TMapaFaturamento.SetTotalDevolvido(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_TOTAL_DEVOLVIDO').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_TOTAL_DEVOLVIDO"!');
    end;
end;

{ Read method for property TotalFaturado }
function TMapaFaturamento.GetTotalFaturado : Double;
begin
  try
    Result := Self.fieldByName('MAP_TOTAL_FATURADO').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property TotalFaturado }
procedure TMapaFaturamento.SetTotalFaturado(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MAP_TOTAL_FATURADO').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MAP_TOTAL_FATURADO"!');
    end;
end;


function TMapaFaturamento.AlterarAuto:Boolean;
begin
  try
    ExecutaSQL(CConfiguracao.QueryComandos,'UPDATE MAPA_FATURAMENTO SET '+
      '  USU_CODIGO='         +IntToStr(CConfiguracao.CodigoUSU)+
      ' ,MAP_DT_ALTERADO="'   +MesDiaHora(CConfiguracao.DataHora)+      
      '",FUN_CODIGO='         +ECodigoFUN.Text+
      ' ,MAP_QTD_PEDIDOS='    +EQTDPedidos.Text+
      ' ,MAP_QTD_PRODUTOS='   +EQTDProdutos.Text+
      ' ,MAP_QTD_RETORNOS='   +EQTDRetornos.Text+
      ' ,MAP_QTD_CADASTROS='  +EQTDCadastros.Text+
      ' ,MAP_QTD_HORAS='      +EQTDHoras.Text+
      ' ,MAP_QTD_LIGACOES='   +EQTDLigacoes.Text+                                   
      ' ,MAP_TOTAL_FATURADO=' +VirgPonto(ETotalFaturado.Text)+
      ' ,MAP_TOTAL_DEVOLVIDO='+VirgPonto(ETotalDevolvido.Text)+      
      ' ,MAP_OBSERVACAO="'    +EOBS.Text+'" '+
      ' WHERE MAP_CODIGO='    +ECodigoMAP.Text+
      ' AND CNC_CODIGO='      +IntToStr(CConfiguracao.CodigoCNC));
      Result := True;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  end;
end;

procedure TMapaFaturamento.AtualizaControles(Habilitar:Boolean);
begin
  try
    ECodigoFUN.Enabled         := Habilitar;
  except
  end;
  try
    EQtdHoras.Enabled          := Habilitar;
  except
  end;
  try
    EQtdRetornos.Enabled       := Habilitar;
  except
  end;
  try
    EQtdLigacoes.Enabled       := Habilitar;
  except
  end;
  try
    EObs.Enabled               := Habilitar;
  except
  end;
end;



procedure TMapaFaturamento.CancelaEdicao;
begin
  Estado:=0;
  AtualizaControles(False);
  CarregaDados;
end;

procedure TMapaFaturamento.CarregaDados;
begin
  Try
    ECodigoMAP.Text              := IntToStr(CodigoMAP);
  Except
  End;
  try
    ECodigoFUN.Text              := IntToStr(CodigoFUN);
  Except
  End;
  Try
    ETotalFaturado.Text          := Format('%.2f',[TotalFaturado]);
  Except
  End;
  Try
    ETotalDevolvido.Text         := Format('%.2f',[TotalDevolvido]);
  Except
  End;  
  Try
    EQtdPedidos.Text             := IntToStr(QtdPedidos);
  Except
  End;
  Try
    EQtdProdutos.Text            := IntToStr(QtdProdutos);
  Except
  End;
  Try
    EQtdRetornos.Text            := IntToStr(QtdRetornos);
  Except
  End;
  Try
    EQtdCadastros.Text           := IntToStr(QtdCadastros);
  Except
  End;
  Try
    EQtdHoras.Text               := IntToStr(QtdHoras);
  Except
  End;      
  Try
    if DtCadastro > 0 then
      EDtCadastro.Text           := FormatDateTime('dd/mm/yyyy', DtCadastro)
    else
      EDtCadastro.Text:=''
  Except
  End;
  Try
    if DtAlterado > 0 then
      EDtAlterado.Text           := FormatDateTime('dd/mm/yyyy hh:mm:ss', DtAlterado)
    else
      EDtAlterado.Text:=''
  Except
  End;  

  Try
    EObs.Text             := OBS;
  Except
  End;
end;

constructor TMapaFaturamento.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

function TMapaFaturamento.Deletar(CdCNC,CDMAP:Integer):Boolean;
begin
  If not localizarCod(CdMAP) Then
  Begin
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!');
    Result := False;
  end
  Else
  Begin
    try
      if Delete then
      Begin
        Result := True;
        if TQuery(Self).isEmpty then
        begin
          try
            ECodigoMAP.Clear;
          except
          end;
          try
            ECodigoFUN.Clear;
          except
          end;          
          try
            EQtdPedidos.Clear;
          except
          end;
          try
            EQtdProdutos.Clear;
          except
          end;
          try
            EQtdRetornos.Clear;
          except
          end;
          try
            EQtdCadastros.Clear;
          except
          end;
          try
            EQtdHoras.Clear;
          except
          end;
          try
            EQtdLigacoes.Clear;
          except
          end;          
          try
            ETotalFaturado.Clear;
          except
          end;
          try
            ETotalDevolvido.Clear;
          except
          end;                                                            
          try
            EObs.Clear;
          except
          end;
        end;
      end
      else
        Result := False;
    Except
      Result := False;
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TMapaFaturamento.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

function TMapaFaturamento.FinalizaEdicao:Boolean;
var
  CdCNC, cod:Integer;
  mensagem:string;
  aux:TDataSetNotifyEvent;
begin
  mensagem:='';
  If not VerificaInteiroBranco(EQtdPedidos.text) Then
    mensagem:=mensagem+'Quantidade de Pedidos incorreta!'+#13;
  If not VerificaInteiroBranco(EQtdProdutos.text) Then
    mensagem:=mensagem+'Quantidade de Produtos incorreta!'+#13;
  If not VerificaInteiroBranco(EQtdRetornos.text) Then
    mensagem:=mensagem+'Quantidade de Retornos incorreta!'+#13;
  If not VerificaInteiroBranco(EQtdCadastros.text) Then
    mensagem:=mensagem+'Quantidade de Cadastros incorreta!'+#13;
  If not VerificaInteiroBranco(EQtdHoras.text) Then
    mensagem:=mensagem+'Quantidade de Horas incorreta!'+#13;
  If not VerificaInteiroBranco(EQtdLigacoes.text) Then
    mensagem:=mensagem+'Quantidade de Ligações incorreta!'+#13;                    
  if not verificafloatBranco(ETotalFaturado.text) then
    mensagem:= mensagem + 'Total Faturado incorreto!'+#13;
  if not verificafloatBranco(ETotalDevolvido.text) then
    mensagem:= mensagem + 'Total Devolvido incorreto!'+#13;
  If mensagem <>'' Then
  Begin
    ShowMessage(mensagem);
    Result := False;
    Exit;
  end
  else
  Begin
    Aux:=AfterScroll;
    AfterScroll:=nil;
    If Estado=1 then
    Begin
      if Inserirauto then
      Begin
        Result := True;
        close;
        open;
        LocalizarCod(CdCNC, SCodigo);
        Estado:=0;
        AtualizaControles(False);
        Carregadados;
      end
      else
        Result := False;
    End
    Else If Estado=2 then
    Begin
      CdCNC := CodigoCNC;
      cod   := CodigoMAP;
      if Alterarauto then
      Begin
        Result := True;
        close;
        open;
        LocalizarCod(CdCNC,cod);
        Estado:=0;
        AtualizaControles(False);
        Carregadados;
      end
      else
        Result := False;
    End
    else
      Result := False;
    AfterScroll:=Aux;
  end;
end;

function TMapaFaturamento.InserirAuto:Boolean;
begin
  result:=False; 
  try
    SCodigo            :=StrToInt(ECodigoMAP.Text);
    append;
    try
      CodigoMAP        := SCodigo;
    except
    end;
    try
      CodigoUSU        := CConfiguracao.CodigoUSU;
    except
    end;
    try
      DataCadastro     := CConfiguracao.DataHora;
    except
    end;
    try
      CodigoCNC        := CConfiguracao.CodigoCNC;
    except
    end;
    try
      CodigoFUN        := StrToInt(ECodigoFUN.Text);
    except
    end;
    try
      QtdPedidos       := StrToInt(EQtdPedidos.Text);
    except
    end;
    try
      QtdProdutos      := StrToInt(EQtdProdutos.Text);
    except
    end;
    try
      QtdRetornos      := StrToInt(EQtdRetornos.Text);
    except
    end;
    try
      QtdCadastros     := StrToInt(EQtdCadastros.Text);
    except
    end;
    try
      QtdHoras         := StrToInt(EQtdHoras.Text);
    except
    end;
    try
      QtdLigacoes      := StrToInt(EQtdLigacoes.Text);
    except
    end;                        
    try
      TotalFaturado    := StrToFloat(ETotalFaturado.Text);
    except
    end;
    try
      TotalDevolvido   := StrToFloat(ETotalDevolvido.Text);
    except
    end;    
    try
      Situacao         := 0;
    except
    end;
    try
      Obs              := EObs.Text;
    except
    end;
    try
      Post;
      result:=True;
    except      
      Cancel;
      ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
    end;
  except
    ShowMessage('Não foi possível incluir o registro corrente. Verifique se está somente Leitura.');  
  end;
end;

{ Localiza um Produto }
function TMapaFaturamento.LocalizarCod(CdCNC, CDMAP:Integer):Boolean;
begin
  If (CdCNC<>CodigoCNC) and (CdMAP<>CodigoMAP) Then
  Begin
    If locate('CNC_CODIGO;MAP_CODIGO', vararrayof([CdCNC, CdMAP]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TMapaFaturamento.PreparaAlteracao;
begin
  Estado:=2;
  AtualizaControles(True);
end;

procedure TMapaFaturamento.PreparaInsercao;
begin
  SCodigo := ProximoCodigo('MAP_CODIGO');
  try
    ECodigoFUN.Clear;
  except
  end;  
  try
    EQtdPedidos.Text := '0';
  except
  end;
  try
    EQtdProdutos.Text := '0';
  except
  end;
  try
    EQtdRetornos.Text := '0';
  except
  end;
  try
    EQtdCadastros.Text := '0';
  except
  end;
  try
    EQtdHoras.Text := '0';
  except
  end;
  try
    EQtdLigacoes.Text := '0';
  except
  end;
  try
    EQtdTotalFaturado.Text := '0,00';
  except
  end;            
  try
    EQtdTotalDevolvido.Text := '0,00';
  except
  end;        
  try
    EObs.Clear;
  except
  end;
  Estado:=1;
  AtualizaControles(True);
end;

function TMapaFaturamento.deletarauto:Boolean;
begin
  try
    if Delete then
      result:=true
    else
      Result := False;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
