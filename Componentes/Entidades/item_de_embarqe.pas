{ ****************************************************************** }
{                                                                    }
{   VCL component TItem_de_Embarqe                                   }
{                                                                    }
{   Ítem de Embarqe da Empresa                                       }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file p:\eletro guerra\classe\principal\item_de_embarque.cd }
{   on 3 May 1999 at 11:55                                           }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Item_de_Embarqe;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Produto, Embarque, Entidade;

type
  TItem_de_Embarqe = class(TSQuery)
    private
      { Private fields of TItem_de_Embarqe }
        { Storage for property CEmbarque }
        FCEmbarque : TEmbarque;
        { Storage for property CEntidade }
        FCEntidade : TEntidade;
        { Storage for property CNC_Codigo_Ent }
        FCNC_Codigo_Ent : Integer;
        { Storage for property CProduto }
        FCProduto : TProduto;
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoEMB }
        FCodigoEMB : Integer;
        { Storage for property CodigoENT }
        FCodigoENT : Integer;
        { Storage for property CodigoIEB }
        FCodigoIEB : Integer;
        { Storage for property CodigoMOV }
        FCodigoMOV : Integer;
        { Storage for property CodigoPRD }
        FCodigoPRD : Integer;
        { Storage for property ECampoLocaliz }
        FECampoLocaliz : TComboBox;
        { Storage for property ECodigoEMB }
        FECodigoEMB : TDBLookupComboBox;
        { Storage for property ECodigoENT }
        FECodigoENT : TDBLookUpComboBox;
        { Storage for property ECodigoIEB }
        FECodigoIEB : TEdit;
        { Storage for property ECodigoMOV }
        FECodigoMOV : TEdit;
        { Storage for property ECodigoPRD }
        FECodigoPRD : TDBLookupComboBox;
        { Storage for property ENomeLocaliz }
        FENomeLocaliz : TEdit;
        { Storage for property EQuantidade }
        FEQuantidade : TEdit;
        { Storage for property ETipoEnt }
        FETipoEnt : TComboBox;
        { Storage for property ETipoMov }
        FETipoMov : TComboBox;
        { Storage for property Quantidade }
        FQuantidade : Double;
        { Storage for property TipoEnt }
        FTipoEnt : Integer;
        { Storage for property TipoMov }
        FTipoMov : Integer;

      { Private methods of TItem_de_Embarqe }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CNC_Codigo_Ent }
        function GetCNC_Codigo_Ent : Integer;
        { Write method for property CNC_Codigo_Ent }
        procedure SetCNC_Codigo_Ent(Value : Integer);
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoEMB }
        function GetCodigoEMB : Integer;
        { Write method for property CodigoEMB }
        procedure SetCodigoEMB(Value : Integer);
        { Read method for property CodigoENT }
        function GetCodigoENT : Integer;
        { Write method for property CodigoENT }
        procedure SetCodigoENT(Value : Integer);
        { Read method for property CodigoIEB }
        function GetCodigoIEB : Integer;
        { Write method for property CodigoIEB }
        procedure SetCodigoIEB(Value : Integer);
        { Read method for property CodigoMOV }
        function GetCodigoMOV : Integer;
        { Write method for property CodigoMOV }
        procedure SetCodigoMOV(Value : Integer);
        { Read method for property CodigoPRD }
        function GetCodigoPRD : Integer;
        { Write method for property CodigoPRD }
        procedure SetCodigoPRD(Value : Integer);
        { Read method for property Quantidade }
        function GetQuantidade : Double;
        { Write method for property Quantidade }
        procedure SetQuantidade(Value : Double);
        { Read method for property TipoEnt }
        function GetTipoEnt : Integer;
        { Write method for property TipoEnt }
        procedure SetTipoEnt(Value : Integer);
        { Read method for property TipoMov }
        function GetTipoMov : Integer;
        { Write method for property TipoMov }
        procedure SetTipoMov(Value : Integer);

    protected
      { Protected fields of TItem_de_Embarqe }

      { Protected methods of TItem_de_Embarqe }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TItem_de_Embarqe }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TItem_de_Embarqe }
        { Altera um Ítem de Embarque }
        procedure Alterar(CdCNC, CdIEB, CdPRD, CdEMB, PTipoMov, CdMOV, PTipoEnt, PCNC_Codigo_Ent, CdEnt: Integer; PQuantidade: Double);
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC, CdIEB:Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        { Insere um Ítem de Embarque }
        procedure Inserir(CdCNC, CdIEB, CdPRD, CdEMB, PTipoMov, CdMOV, PTipoEnt, PCNC_Codigo_Ent, CdEnt: Integer; PQuantidade: Double);
        function InserirAuto:Boolean;
        function Localizar:boolean;
        { Localiza um Ítem de Embarque }
        function LocalizarCod(CdIEB, CdCNC: Integer):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TItem_de_Embarqe }
        property CEmbarque : TEmbarque read FCEmbarque write FCEmbarque;
        property CEntidade : TEntidade read FCEntidade write FCEntidade;
        property CNC_Codigo_Ent : Integer
             read GetCNC_Codigo_Ent write SetCNC_Codigo_Ent;
        property CProduto : TProduto read FCProduto write FCProduto;
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        { Código do Embarque }
        property CodigoEMB : Integer read GetCodigoEMB write SetCodigoEMB;
        property CodigoENT : Integer read GetCodigoENT write SetCodigoENT;
        { Código do Ítem de Embarque }
        property CodigoIEB : Integer read GetCodigoIEB write SetCodigoIEB;
        property CodigoMOV : Integer read GetCodigoMOV write SetCodigoMOV;
        { Código do Produto }
        property CodigoPRD : Integer read GetCodigoPRD write SetCodigoPRD;
        property ECampoLocaliz : TComboBox
             read FECampoLocaliz write FECampoLocaliz;
        property ECodigoEMB : TDBLookupComboBox
             read FECodigoEMB write FECodigoEMB;
        property ECodigoENT : TDBLookUpComboBox
             read FECodigoENT write FECodigoENT;
        property ECodigoIEB : TEdit read FECodigoIEB write FECodigoIEB;
        property ECodigoMOV : TEdit read FECodigoMOV write FECodigoMOV;
        property ECodigoPRD : TDBLookupComboBox
             read FECodigoPRD write FECodigoPRD;
        property ENomeLocaliz : TEdit read FENomeLocaliz write FENomeLocaliz;
        property EQuantidade : TEdit read FEQuantidade write FEQuantidade;
        property ETipoEnt : TComboBox read FETipoEnt write FETipoEnt;
        property ETipoMov : TComboBox read FETipoMov write FETipoMov;
        property Quantidade : Double read GetQuantidade write SetQuantidade;
        property TipoEnt : Integer read GetTipoEnt write SetTipoEnt;
        property TipoMov : Integer read GetTipoMov write SetTipoMov;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TItem_de_Embarqe with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TItem_de_Embarqe]);
end;

{ Method to set variable and property values and create objects }
procedure TItem_de_Embarqe.AutoInitialize;
begin
     Estado := 0;
     FECampoLocaliz := nil;
     FECodigoEMB := nil;
     FECodigoENT := nil;
     FECodigoIEB := nil;
     FECodigoMOV := nil;
     FECodigoPRD := nil;
     FENomeLocaliz := nil;
     FEQuantidade := nil;
     FETipoEnt := nil;
     FETipoMov := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TItem_de_Embarqe.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECampoLocaliz then
        FECampoLocaliz := nil;
     if AComponent = FECodigoEMB then
        FECodigoEMB := nil;
     if AComponent = FECodigoENT then
        FECodigoENT := nil;
     if AComponent = FECodigoIEB then
        FECodigoIEB := nil;
     if AComponent = FECodigoMOV then
        FECodigoMOV := nil;
     if AComponent = FECodigoPRD then
        FECodigoPRD := nil;
     if AComponent = FENomeLocaliz then
        FENomeLocaliz := nil;
     if AComponent = FEQuantidade then
        FEQuantidade := nil;
     if AComponent = FETipoEnt then
        FETipoEnt := nil;
     if AComponent = FETipoMov then
        FETipoMov := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TItem_de_Embarqe.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CNC_Codigo_Ent }
function TItem_de_Embarqe.GetCNC_Codigo_Ent : Integer;
begin
  try
    Result := Self.fieldByName('IEB_CNC_CODIGO_ENT').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CNC_Codigo_Ent }
procedure TItem_de_Embarqe.SetCNC_Codigo_Ent(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IEB_CNC_CODIGO_ENT').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IEB_CNC_CODIGO_ENT"!');
  end;
end;

{ Read method for property CodigoCNC }
function TItem_de_Embarqe.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TItem_de_Embarqe.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoEMB }
function TItem_de_Embarqe.GetCodigoEMB : Integer;
begin
  try
    Result := Self.fieldByName('EMB_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoEMB }
procedure TItem_de_Embarqe.SetCodigoEMB(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('EMB_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "EMB_CODIGO"!');
    end;
end;

{ Read method for property CodigoENT }
function TItem_de_Embarqe.GetCodigoENT : Integer;
begin
  try
    Result := Self.fieldByName('IEB_ENT_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoENT }
procedure TItem_de_Embarqe.SetCodigoENT(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IEB_ENT_CODIGO').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IEB_TIPO_CODIGO"!');
  end;
end;

{ Read method for property CodigoIEB }
function TItem_de_Embarqe.GetCodigoIEB : Integer;
begin
  try
    Result := Self.fieldByName('IEB_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoIEB }
procedure TItem_de_Embarqe.SetCodigoIEB(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IEB_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IEB_CODIGO"!');
    end;
end;

{ Read method for property CodigoMOV }
function TItem_de_Embarqe.GetCodigoMOV : Integer;
begin
  try
    Result := Self.fieldByName('IEB_CODIGO_MOV').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoMOV }
procedure TItem_de_Embarqe.SetCodigoMOV(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IEB_CODIGO_MOV').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IEB_CODIGO_MOV"!');
  end;
end;

{ Read method for property CodigoPRD }
function TItem_de_Embarqe.GetCodigoPRD : Integer;
begin
  try
    Result := Self.fieldByName('PRD_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoPRD }
procedure TItem_de_Embarqe.SetCodigoPRD(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('PRD_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "PRD_CODIGO"!');
    end;
end;

{ Read method for property Quantidade }
function TItem_de_Embarqe.GetQuantidade : Double;
begin
  try
    Result := Self.fieldByName('IEB_QUANTIDADE').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property Quantidade }
procedure TItem_de_Embarqe.SetQuantidade(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IEB_QUANTIDADE').asFloat := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IEB_QUANTIDADE"!');
  end;
end;

{ Read method for property TipoEnt }
function TItem_de_Embarqe.GetTipoEnt : Integer;
begin
  try
    Result := Self.fieldByName('IEB_TIPO_ENT').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property TipoEnt }
procedure TItem_de_Embarqe.SetTipoEnt(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IEB_TIPO_ENT').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IEB_TIPO_ENT"!');
    end;
end;

{ Read method for property TipoMov }
function TItem_de_Embarqe.GetTipoMov : Integer;
begin
  try
    Result := Self.fieldByName('IEB_TIPO_MOV').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property TipoMov }
procedure TItem_de_Embarqe.SetTipoMov(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IEB_TIPO_MOV').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IEB_TIPO_MOV"!');
  end;
end;

{ Altera um Ítem de Embarque }
procedure TItem_de_Embarqe.Alterar(CdCNC, CdIEB, CdPRD, CdEMB, PTipoMov, CdMOV, PTipoEnt, PCNC_Codigo_Ent, CdEnt: Integer; PQuantidade: Double);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdIEB,CdCNC)) Then
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      edit;
      CodigoPRD      := CdPRD;
      CodigoEMB      := CdEMB;
      TipoMov        := PTipoMov;
      CodigoMOV      := CdMOV;
      Quantidade     := PQuantidade;
      TipoEnt        := PTipoEnt;
      CNC_Codigo_Ent := PCNC_Codigo_Ent;
      CodigoENT      := CdENT;

      try
        Post;
      except
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TItem_de_Embarqe.AlterarAuto:Boolean;
begin
    try
      edit;
      try
         CodigoPRD := ECodigoPRD.KeyValue;
      except
      end;
      try
         CodigoEMB := ECodigoEMB.KeyValue;
      except
      end;
      try
         TipoMov := ETipoMov.ItemIndex;
      except
      end;
      try
         CodigoMOV := StrToInt(ECodigoMOV.Text);
      except
      end;
      try
         Quantidade := StrToFloat(EQuantidade.Text);
      except
      end;
      try
         TipoEnt := ETipoEnt.ItemIndex;
      except
      end;
      try
         CodigoENT := ECodigoENT.KeyValue;
      except
      end;

      try
        Post;
        Result:=True;
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TItem_de_Embarqe.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
   ECodigoPRD.Enabled    :=Habilitar;
   ECodigoEMB.Enabled    :=Habilitar;
   ETipoMov.Enabled      :=Habilitar;
   ECodigoMOV.Enabled    :=Habilitar;
   EQuantidade.Enabled   :=Habilitar;
   ETipoEnt.Enabled      :=Habilitar;
   ECodigoENT.Enabled    :=Habilitar;
end;

procedure TItem_de_Embarqe.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TItem_de_Embarqe.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
   ECodigoIEB.Text           :=IntToStr(CodigoIEB);
   ECodigoPRD.KeyValue       :=CodigoPRD;
   ECodigoEMB.KeyValue       :=CodigoEMB;
   ETipoMov.ItemIndex        :=TipoMov;
   ECodigoMOV.Text           :=IntToStr(CodigoMOV);
   EQuantidade.Text          :=FloatToStr(Quantidade);
   ETipoEnt.ItemIndex        :=TipoEnt;
   ECodigoENT.KeyValue       :=CodigoENT;
end;

constructor TItem_de_Embarqe.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TItem_de_Embarqe.Deletar(CdCNC, CdIEB:Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdIEB,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TItem_de_Embarqe.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TItem_de_Embarqe.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod, cdcnc:Integer;
begin
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
  End;

  If Estado=2 then
  Begin
    cod:=codigoIEB;
    cdcnc:=codigoCNC;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

{ Insere um Ítem de Embarque }
procedure TItem_de_Embarqe.Inserir(CdCNC, CdIEB, CdPRD, CdEMB, PTipoMov, CdMOV, PTipoEnt, PCNC_Codigo_Ent, CdEnt: Integer; PQuantidade: Double);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If localizarCod(CdIEB, CdCNC) Then
    ShowMessage('Não foi possível incluir o registro corrente pois ele já existe!')
  Else
  Begin
    try
      Insert;
      CodigoCNC      := CdCNC;
      CodigoPRD      := CdPRD;
      CodigoEMB      := CdEMB;
      TipoMov        := PTipoMov;
      CodigoMOV      := CdMOV;
      Quantidade     := PQuantidade;
      TipoEnt        := PTipoEnt;
      CNC_Codigo_Ent := PCNC_Codigo_Ent;
      CodigoENT      := CdENT;

      try
        Post;
      except
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
      end;
    except
      ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TItem_de_Embarqe.InserirAuto:Boolean;
Var
  Aux:TDataSetNotifyEvent;
begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
        codigocnc   := 1;
      except
      end;
      try
         CodigoPRD := ECodigoPRD.KeyValue;
      except
      end;
      try
         CodigoEMB := ECodigoEMB.KeyValue;
      except
      end;
      try
         TipoMov := ETipoMov.ItemIndex;
      except
      end;
      try
         CodigoMOV := StrToInt(ECodigoMOV.Text);
      except
      end;
      try
         Quantidade := StrToFloat(EQuantidade.Text);
      except
      end;
      try
         TipoEnt := ETipoEnt.ItemIndex;
      except
      end;
      try
         CodigoENT := ECodigoENT.KeyValue;
      except
      end;

      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TItem_de_Embarqe.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

function TItem_de_Embarqe.Localizar:boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Campo,Nome,campoloc:String;
  i         :Integer;
begin
  If (ECampoLocaliz.Text<>'') and (ENomeLocaliz.text<>'') Then
  Begin
    try
      campoloc:=trim(ECampoLocaliz.Text);
      for i:= length(campoloc) downto 1 do
        If campoloc[i]=' ' Then
        Begin
          Campo := Copy(campoloc,i+1,length(campoloc)-i);
          Break;
        End;
    except
    end;
    try
      Nome:=Trim(ENomeLocaliz.text);
    except
    end;
    If locate(campo,Nome, []) Then
      Result:=True
    else
      Result:=False;
  End;
end;

{ Localiza um Ítem de Embarque }
function TItem_de_Embarqe.LocalizarCod(CdIEB, CdCNC: Integer):Boolean;
begin
  If (CdIEB<>CodigoIEB) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO; IEB_CODIGO', vararrayof([CdCNC, CdIEB]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TItem_de_Embarqe.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TItem_de_Embarqe.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  ECodigoIEB.Clear;
  ETipoMov.Text := '';
  ECodigoMOV.Clear;
  EQuantidade.Clear;
  ETipoEnt.Text := '';

  AtualizaControles(True);
  Estado:=1;
end;

function TItem_de_Embarqe.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
