{ ****************************************************************** }
{                                                                    }
{   VCL component TParametro                                         }
{                                                                    }
{   Parâmetro da Empresa                                             }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file c:\aplicativos\eletro guerra\classe\principal\parametro.cd }
{   on 21 Aug 1999 at 17:57                                          }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Parametr;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, TipoParam, Dbctrls, Configuracao, Dbgrids;

type
  TParametro = class(TSQuery)
    private
      { Private fields of TParametro }
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoPAR }
        FCodigoPAR : Integer;
        { Storage for property CodigoTPR }
        FCodigoTPR : Integer;
        { Storage for property Descricao }
        FDescricao : String;
        { Storage for property ECampoLocaliz }
        FECampoLocaliz : TComboBox;
        { Storage for property ECodigoPAR }
        FECodigoPAR : TEdit;
        { Storage for property ECodigoTPR }
        FECodigoTPR : TDBLookupComboBox;
        { Storage for property EDbgrid }
        FEDbgrid : TDBGrid;
        { Storage for property EDescricao }
        FEDescricao : TEdit;
        { Storage for property ENomeLocaliz }
        FENomeLocaliz : TEdit;
        { Storage for property ETipoParam }
        FETipoParam : TTipoParam;

      { Private methods of TParametro }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoPAR }
        function GetCodigoPAR : Integer;
        { Write method for property CodigoPAR }
        procedure SetCodigoPAR(Value : Integer);
        { Read method for property CodigoTPR }
        function GetCodigoTPR : Integer;
        { Write method for property CodigoTPR }
        procedure SetCodigoTPR(Value : Integer);
        { Read method for property Descricao }
        function GetDescricao : String;
        { Write method for property Descricao }
        procedure SetDescricao(Value : String);

    protected
      { Protected fields of TParametro }

      { Protected methods of TParametro }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TParametro }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TParametro }
        { Altera um parametro }
        function Alterar(CdCNC,CdPAR,CdTPR: integer; PDescricao: String):boolean;
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC,CdPAR:Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        procedure Importa;
        { Insere um Parametro }
        function Inserir(CdCNC,CdPAR,CdTPR: integer; PDescricao: String):boolean;
        function InserirAuto:Boolean;
        function Localizar:boolean;
        { Localiza um Parametro }
        function LocalizarCod(CdPAR,CdCNC:Integer):Boolean;
        function LocalizarNome(Nome:String):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TParametro }
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        property CodigoPAR : Integer read GetCodigoPAR write SetCodigoPAR;
        { Código do Tipo de Parametro }
        property CodigoTPR : Integer read GetCodigoTPR write SetCodigoTPR;
        property Descricao : String read GetDescricao write SetDescricao;
        property ECampoLocaliz : TComboBox
             read FECampoLocaliz write FECampoLocaliz;
        property ECodigoPAR : TEdit read FECodigoPAR write FECodigoPAR;
        property ECodigoTPR : TDBLookupComboBox
             read FECodigoTPR write FECodigoTPR;
        property EDbgrid : TDBGrid read FEDbgrid write FEDbgrid;
        property EDescricao : TEdit read FEDescricao write FEDescricao;
        property ENomeLocaliz : TEdit read FENomeLocaliz write FENomeLocaliz;
        property ETipoParam : TTipoParam read FETipoParam write FETipoParam;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TParametro with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TParametro]);
end;

{ Method to set variable and property values and create objects }
procedure TParametro.AutoInitialize;
begin
     Estado := 0;
     FECampoLocaliz := nil;
     FECodigoPAR := nil;
     FECodigoTPR := nil;
     FEDbgrid := nil;
     FEDescricao := nil;
     FENomeLocaliz := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TParametro.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECampoLocaliz then
        FECampoLocaliz := nil;
     if AComponent = FECodigoPAR then
        FECodigoPAR := nil;
     if AComponent = FECodigoTPR then
        FECodigoTPR := nil;
     if AComponent = FEDbgrid then
        FEDbgrid := nil;
     if AComponent = FEDescricao then
        FEDescricao := nil;
     if AComponent = FENomeLocaliz then
        FENomeLocaliz := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TParametro.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCNC }
function TParametro.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TParametro.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoPAR }
function TParametro.GetCodigoPAR : Integer;
begin
  try
    Result := Self.fieldByName('PAR_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoPAR }
procedure TParametro.SetCodigoPAR(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('PAR_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "PAR_CODIGO"!');
    end;
end;

{ Read method for property CodigoTPR }
function TParametro.GetCodigoTPR : Integer;
begin
  try
    Result := Self.fieldByName('TPR_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoTPR }
procedure TParametro.SetCodigoTPR(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('TPR_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "TPR_CODIGO"!');
    end;
end;

{ Read method for property Descricao }
function TParametro.GetDescricao : String;
begin
  try
    Result := Self.fieldByName('PAR_DESCRICAO').asString;
  except
    result:= ''
  end;
end;

{ Write method for property Descricao }
procedure TParametro.SetDescricao(Value : String);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('PAR_DESCRICAO').asString := Value;
  except
    ShowMessage('Não foi possível alterar o campo "PAR_DESCRICAO"!');
  end;
end;

{ Altera um parametro }
function TParametro.Alterar(CdCNC,CdPAR,CdTPR: integer; PDescricao: String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result := true;
  If not(localizarCod(CdPAR,CdCNC)) Then
  begin
    result := false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      CodigoTPR      := CdTPR;
      Descricao      := PDescricao;
      try
        Post;
        if CodigoCNC=0 then
          Exporta(16,CodigoCNC, CodigoPAR, -1, '02')
        else
          ;
      except
        result := false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result := false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TParametro.AlterarAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
    try
      edit;
      try
         CodigoTPR  := ECodigoTPR.DataSource.Dataset.FieldByName(ECodigoTPR.DataField).value;
      except
      end;
      try
         Descricao  := EDescricao.Text;
      except
      end;
      try
        Post;
        Result:=True;
        GeraLog(560,CodigoCNC,CodigoPAR,'17',Now);
        if CodigoCNC=0 then
          Exporta(16,CodigoCNC, CodigoPAR, -1, '02')
        else
          ;
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TParametro.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   EDbgrid.Enabled           :=not Habilitar;
 except
 end;
 try
   ECodigoTPR.Enabled     :=not Habilitar;
   except
 end;
 try
   EDescricao.Enabled     :=Habilitar;
   except
 end;
end;

procedure TParametro.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TParametro.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 try
   ECodigoPAR.Text           :=IntToStr(CodigoPAR);
   except
 end;
 try
   ECodigoTPR.KeyValue       :=CodigoTPR;
   except
 end;
 try
   EDescricao.Text           :=Descricao;
   except
 end;
end;

constructor TParametro.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TParametro.Deletar(CdCNC,CdPAR:Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdPAR,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
      if TQuery(Self).isEmpty then
      begin
        try
         ECodigoPAR.Clear;
         except
        end;
        try
         ECodigoTPR.KeyValue := 0;
         except
        end;
        try
         EDescricao.Clear;
         except
        end;
      end;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TParametro.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TParametro.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod, cdcnc:Integer;
begin
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
    LocalizarCod(SCodigo,CodigoCNC);
  End;

  If Estado=2 then
  Begin
    cod:=codigoPAR;
    cdcnc:=codigoCNC;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

procedure TParametro.Importa;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  Estado:=3;
  with CTransfArq do
  begin
    SelecionaTipo(16, date);
    while not eof do
    begin
      with Self.ImportComponent do
      begin
        close;
        ParamByName('CODIGO').asInteger:=Origem;
        ParamByName('CODIGOCNC').asInteger:=OrigemCNC;
        open;
      end;
      ValidaTransf:= not Self.ImportComponent.IsEmpty;
      if Metodo='01' then
        with TParametro(ImportComponent) do
        begin
          Self.Inserir(CodigoCNC,CodigoPAR,CodigoTPR,Descricao);
        end;
      if Metodo='02' then
        with TParametro(ImportComponent) do
        begin
          Self.Alterar(CodigoCNC,CodigoPAR,CodigoTPR,Descricao);
        end;
      if Metodo='03' then
        with TParametro(ImportComponent) do
        begin
          Self.Deletar(CodigoCNC,CodigoPAR);
        end;
      if Metodo='04' then
        with TParametro(ImportComponent) do
        begin
          Self.Inserir(CodigoCNC,0,CodigoTPR,Descricao);
        end;
      if Metodo='05' then
        with TParametro(ImportComponent) do
        begin
          Self.DeletarTodos;
        end;
      if Metodo='06' then
        with TParametro(ImportComponent) do
        begin
          Self.Deletar(CodigoCNC,CodigoPAR);
          Self.Inserir(CodigoCNC,CodigoPAR,CodigoTPR,Descricao);
        end;
      if ValidaTransf then
         CTransfArqDest.Inserir(CodigoCNC,CodigoTRA,1,Tipo,OrigemCNC,Origem,Destino,Data,Metodo);
      next;
    end;
  end;
  Estado:=0;
end;

{ Insere um Parametro }
function TParametro.Inserir(CdCNC,CdPAR,CdTPR: integer; PDescricao: String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result := true;
  Insert;
  if CdPAR=0 then
    CodigoPAR    := ProximoCodigo('PAR_CODIGO')
  else
    CodigoPAR    := CdPAR;
  try
    CodigoCNC      := CdCNC;
    CodigoTPR      := CdTPR;
    Descricao      := PDescricao;

    try
      Post;
      if Estado<>3 then
      begin
         if CodigoCNC=0 then
           Exporta(16,CodigoCNC, CodigoPAR, -1, '01')
         else
          ;
      end;
    except
      result := false;
      Cancel;
      ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
    end;
  except
    result := false;
    ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
  end;
end;

function TParametro.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Aux:TDataSetNotifyEvent;
begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
        CodigoPAR   := SCodigo;
      except
      end;
      try
        codigocnc   := 0;
      except
      end;
      try
         CodigoTPR  := ECodigoTPR.ListSource.Dataset.FieldByName(ECodigoTPR.KeyField).asinteger;
      except
      end;
      try
         Descricao  := EDescricao.Text;
      except
      end;
      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
        GeraLog(540,CodigoCNC,CodigoPAR,'17',Now);
        if CodigoCNC=0 then
          Exporta(16,CodigoCNC, CodigoPAR, -1, '01')
        else
          ;
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TParametro.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

function TParametro.Localizar:boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Campo,Nome,campoloc:String;
  i         :Integer;
begin
  If (ECampoLocaliz.Text<>'') and (ENomeLocaliz.text<>'') Then
  Begin
    try
      campoloc:=trim(ECampoLocaliz.Text);
      for i:= length(campoloc) downto 1 do
        If campoloc[i]=' ' Then
        Begin
          Campo := Copy(campoloc,i+1,length(campoloc)-i);
          Break;
        End;
    except
    end;
    try
      Nome:=Trim(ENomeLocaliz.text);
    except
    end;
    If locate(campo,Nome, [loCaseInsensitive]) Then
      Result:=True
    else
      Result:=False;
  End;
end;

{ Localiza um Parametro }
function TParametro.LocalizarCod(CdPAR,CdCNC:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CdPAR<>CodigoPAR) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO;PAR_CODIGO', vararrayof([CdCNC, CdPAR]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

function TParametro.LocalizarNome(Nome:String):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If Nome<>Descricao Then
    If locate('PAR_DESCRICAO',Nome, []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TParametro.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TParametro.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
ProximoCodigo('PAR_CODIGO');
 try
  EDescricao.Clear;
  except
 end;
  AtualizaControles(True);
  Estado:=1;
end;

function TParametro.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
    result:=true;
    GeraLog(550,CodigoCNC,CodigoPAR,'17',Now);
    if CodigoCNC=0 then
      Exporta(16,CodigoCNC, CodigoPAR, -1, '03')
    else
       ;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
