{ ****************************************************************** }
{                                                                    }
{   VCL component TItem_de_Inventario                                }
{                                                                    }
{   Ítem de Inventário da Empresa                                    }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file p:\eletro guerra\classe\principal\item_de_inventario.cd }
{   on 15 July 1999 at 17:02                                         }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Item_de_Invetario;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Produto, Inventario, Configuracao;

type
  TItem_de_Inventario = class(TSQuery)
    private
      { Private fields of TItem_de_Inventario }
        { Storage for property CInventario }
        FCInventario : TInventario;
        { Storage for property CProduto }
        FCProduto : TProduto;
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoIIV }
        FCodigoIIV : Integer;
        { Storage for property CodigoINV }
        FCodigoINV : Integer;
        { Storage for property CodigoPRD }
        FCodigoPRD : Integer;
        { Storage for property Contador }
        FContador : Integer;
        { Storage for property ECampoLocaliz }
        FECampoLocaliz : TComboBox;
        { Storage for property ECodigoIIV }
        FECodigoIIV : TEdit;
        { Storage for property ECodigoINV }
        FECodigoINV : TDBLookUpComboBox;
        { Storage for property ECodigoPRD }
        FECodigoPRD : TDBLOOkUpComboBox;
        { Storage for property EContador }
        FEContador : TEdit;
        { Storage for property ENomeLocaliz }
        FENomeLocaliz : TEdit;
        { Storage for property EQuantInf }
        FEQuantInf : TEdit;
        { Storage for property EQuantSist }
        FEQuantSist : TEdit;
        { Storage for property QuantInf }
        FQuantInf : Double;
        { Storage for property QuantSist }
        FQuantSist : Double;

      { Private methods of TItem_de_Inventario }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoIIV }
        function GetCodigoIIV : Integer;
        { Write method for property CodigoIIV }
        procedure SetCodigoIIV(Value : Integer);
        { Read method for property CodigoINV }
        function GetCodigoINV : Integer;
        { Write method for property CodigoINV }
        procedure SetCodigoINV(Value : Integer);
        { Read method for property CodigoPRD }
        function GetCodigoPRD : Integer;
        { Write method for property CodigoPRD }
        procedure SetCodigoPRD(Value : Integer);
        { Read method for property Contador }
        function GetContador : Integer;
        { Write method for property Contador }
        procedure SetContador(Value : Integer);
        { Read method for property QuantInf }
        function GetQuantInf : Double;
        { Write method for property QuantInf }
        procedure SetQuantInf(Value : Double);
        { Read method for property QuantSist }
        function GetQuantSist : Double;
        { Write method for property QuantSist }
        procedure SetQuantSist(Value : Double);

    protected
      { Protected fields of TItem_de_Inventario }

      { Protected methods of TItem_de_Inventario }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TItem_de_Inventario }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TItem_de_Inventario }
        { Altera um Ítem de Inventário }
        function Alterar(CdCNC, CdIIV, CdPRD, CdINV, PContador: Integer; PQuantSist, PQuantInf:Double):boolean;
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC, CdIIV: Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        procedure Importa;
        { Insere um Ítem de Inventário }
        function Inserir(CdCNC, CdIIV, CdPRD, CdINV, PContador: Integer;PQuantSist, PQuantInf: Double):boolean;
        function InserirAuto:Boolean;
        function Localizar:boolean;
        { Localiza um Ítem de Inventário }
        function LocalizarCod(CdIIV, CdCNC: Integer): Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TItem_de_Inventario }
        property CInventario : TInventario
             read FCInventario write FCInventario;
        property CProduto : TProduto read FCProduto write FCProduto;
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        { Código do ítem de inventário }
        property CodigoIIV : Integer read GetCodigoIIV write SetCodigoIIV;
        { Código do Inventário }
        property CodigoINV : Integer read GetCodigoINV write SetCodigoINV;
        { Código do produto }
        property CodigoPRD : Integer read GetCodigoPRD write SetCodigoPRD;
        property Contador : Integer read GetContador write SetContador;
        property ECampoLocaliz : TComboBox
             read FECampoLocaliz write FECampoLocaliz;
        property ECodigoIIV : TEdit read FECodigoIIV write FECodigoIIV;
        property ECodigoINV : TDBLookUpComboBox
             read FECodigoINV write FECodigoINV;
        property ECodigoPRD : TDBLOOkUpComboBox
             read FECodigoPRD write FECodigoPRD;
        property EContador : TEdit read FEContador write FEContador;
        property ENomeLocaliz : TEdit read FENomeLocaliz write FENomeLocaliz;
        property EQuantInf : TEdit read FEQuantInf write FEQuantInf;
        property EQuantSist : TEdit read FEQuantSist write FEQuantSist;
        property QuantInf : Double read GetQuantInf write SetQuantInf;
        property QuantSist : Double read GetQuantSist write SetQuantSist;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TItem_de_Inventario with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TItem_de_Inventario]);
end;

{ Method to set variable and property values and create objects }
procedure TItem_de_Inventario.AutoInitialize;
begin
     Estado := 0;
     FECampoLocaliz := nil;
     FECodigoIIV := nil;
     FECodigoINV := nil;
     FECodigoPRD := nil;
     FEContador := nil;
     FENomeLocaliz := nil;
     FEQuantInf := nil;
     FEQuantSist := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TItem_de_Inventario.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECampoLocaliz then
        FECampoLocaliz := nil;
     if AComponent = FECodigoIIV then
        FECodigoIIV := nil;
     if AComponent = FECodigoINV then
        FECodigoINV := nil;
     if AComponent = FECodigoPRD then
        FECodigoPRD := nil;
     if AComponent = FEContador then
        FEContador := nil;
     if AComponent = FENomeLocaliz then
        FENomeLocaliz := nil;
     if AComponent = FEQuantInf then
        FEQuantInf := nil;
     if AComponent = FEQuantSist then
        FEQuantSist := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TItem_de_Inventario.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCNC }
function TItem_de_Inventario.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TItem_de_Inventario.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoIIV }
function TItem_de_Inventario.GetCodigoIIV : Integer;
begin
  try
    Result := Self.fieldByName('IIV_CODIGO').asInteger;
  except
    Result:= 0
  end;
end;

{ Write method for property CodigoIIV }
procedure TItem_de_Inventario.SetCodigoIIV(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IIV_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IIV_CODIGO"!');
    end;
end;

{ Read method for property CodigoINV }
function TItem_de_Inventario.GetCodigoINV : Integer;
begin
  try
    Result := Self.fieldByName('INV_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoINV }
procedure TItem_de_Inventario.SetCodigoINV(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('INV_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "INV_CODIGO"!');
    end;
end;

{ Read method for property CodigoPRD }
function TItem_de_Inventario.GetCodigoPRD : Integer;
begin
  try
    Result := Self.fieldByName('PRD_CODIGO').asInteger;
  except
    result:= 0
  end;
end;


{ Write method for property CodigoPRD }
procedure TItem_de_Inventario.SetCodigoPRD(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('PRD_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "PRD_CODIGO"!');
    end;
end;

{ Read method for property Contador }
function TItem_de_Inventario.GetContador : Integer;
begin
  try
    Result := Self.fieldByName('IIV_FUN_CONTADOR').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property Contador }
procedure TItem_de_Inventario.SetContador(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IIV_FUN_CONTADOR').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IIV_FUN_CONTADOR"!');
    end;
end;

{ Read method for property QuantInf }
function TItem_de_Inventario.GetQuantInf : Double;
begin
  try
    Result := Self.fieldByName('IIV_QUANT_INF').asFloat;
  except
    Result := 0
  end;
end;

{ Write method for property QuantInf }
procedure TItem_de_Inventario.SetQuantInf(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IIV_QUANT_INF').asFloat := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IIV_QUANT_INF"!');
  end;
end;

{ Read method for property QuantSist }
function TItem_de_Inventario.GetQuantSist : Double;
begin
  try
    Result := Self.fieldByName('IIV_QUANT_SIST').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property QuantSist }
procedure TItem_de_Inventario.SetQuantSist(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IIV_QUANT_SIST').asFloat := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IIV_QUANT_SIST"!');
  end;
end;

{ Altera um Ítem de Inventário }
function TItem_de_Inventario.Alterar(CdCNC, CdIIV, CdPRD, CdINV, PContador: Integer; PQuantSist, PQuantInf:Double):boolean;
begin
  result:=true;
  If not(localizarCod(CdIIV,CdCNC)) Then
  begin
    result:=false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      CodigoPRD      := CdPRD;
      CodigoINV      := CdINV;
      QuantSist      := PQuantSist;
      QuantInf       := PQuantInf;
      Contador       := PContador;

      try
        Post;
      except
        result:=false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TItem_de_Inventario.AlterarAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
    try
      edit;
      try
         CodigoPRD := ECodigoPRD.KeyValue;
      except
      end;
      try
         CodigoINV := ECodigoINV.KeyValue;
      except
      end;
      try
         QuantSist := StrToFloat(EQuantSist.Text);
      except
      end;
      try
         QuantInf := StrToFloat(EQuantInf.Text);
      except
      end;
      try
         Contador := StrToInt(EContador.Text);
      except
      end;

      try
        Post;
        Result:=True;
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TItem_de_Inventario.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   ECodigoPRD.Enabled    :=Habilitar;
   Except
  End;
  Try
   ECodigoINV.Enabled    :=Habilitar;
   Except
  End;
  Try
   EQuantSist.Enabled    :=Habilitar;
   Except
  End;
  Try
   EQuantInf.Enabled     :=Habilitar;
   Except
  End;
  Try
   EContador.Enabled     :=Habilitar;
   Except
  End;

end;

procedure TItem_de_Inventario.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TItem_de_Inventario.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  Try
   ECodigoIIV.Text                :=IntToStr(CodigoIIV);
   Except
  End;
  Try
   ECodigoPRD.KeyValue       :=CodigoPRD;
   Except
  End;
  Try
   ECodigoINV.KeyValue       :=CodigoINV;
   Except
  End;
  Try
   EQuantSist.Text           :=Format('%.2n', [QuantSist]);
   Except
  End;
  Try
   EQuantInf.Text            :=Format('%.2n', [QuantInf]);
   Except
  End;
  Try
   EContador.Text            :=IntToStr(Contador);
   Except
  End;

end;

constructor TItem_de_Inventario.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TItem_de_Inventario.Deletar(CdCNC, CdIIV: Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdIIV, CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TItem_de_Inventario.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TItem_de_Inventario.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod, cdcnc:Integer;
begin
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
  End;

  If Estado=2 then
  Begin
    cod:=codigoIIV;
    cdcnc:=codigoCNC;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

procedure TItem_de_Inventario.Importa;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
with CTransfArq do
  begin
    SelecionaTipo(51, date);
    while not eof do
    begin
      if Metodo='01' then
        with TItem_de_Inventario(ImportComponent) do
        begin
          Self.Inserir(CodigoCNC,CodigoIIV,CodigoPRD,CodigoINV,Contador,QuantSist,QuantInf);
        end;
      if Metodo='02' then
        with TItem_de_Inventario(ImportComponent) do
        begin
          Self.Alterar(CodigoCNC,CodigoIIV,CodigoPRD,CodigoINV,Contador,QuantSist,QuantInf);
        end;
      if Metodo='03' then
        with TItem_de_Inventario(ImportComponent) do
        begin
          Self.Deletar(CodigoCNC,CodigoIIV);
        end;
      next;
    end;
  end;
end;

{ Insere um Ítem de Inventário }
function TItem_de_Inventario.Inserir(CdCNC, CdIIV, CdPRD, CdINV, PContador: Integer;PQuantSist, PQuantInf: Double):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result:=true;
  Insert;
  if CdIIV=0 then
    CodigoIIV    := ProximoCodigo('IIV_CODIGO')
  else
    CodigoIIV    := CdIIV;
  try
    CodigoCNC      := CdCNC;
    CodigoPRD      := CdPRD;
    CodigoINV      := CdINV;
    QuantSist      := PQuantSist;
    QuantInf       := PQuantInf;
    Contador       := PContador;

    try
      Post;
    except
      result:=false;
      Cancel;
      ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
    end;
  except
    result:=false;
    ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
  end;
end;

function TItem_de_Inventario.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Aux:TDataSetNotifyEvent;
begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
         codigoCNC   := CConfiguracao.CodigoCNC;
      except
      end;
      try
        codigoIIV := SCodigo;
      except
      end;
      try
         CodigoPRD := ECodigoPRD.KeyValue;
      except
      end;
      try
         CodigoINV := ECodigoINV.KeyValue;
      except
      end;
      try
         QuantSist := StrToFloat(EQuantSist.Text);
      except
      end;
      try
         QuantInf := StrToFloat(EQuantInf.Text);
      except
      end;
      try
         Contador := StrToInt(EContador.Text);
      except
      end;

      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TItem_de_Inventario.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

function TItem_de_Inventario.Localizar:boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Campo,Nome,campoloc:String;
  i         :Integer;
begin
  If (ECampoLocaliz.Text<>'') and (ENomeLocaliz.text<>'') Then
  Begin
    try
      campoloc:=trim(ECampoLocaliz.Text);
      for i:= length(campoloc) downto 1 do
        If campoloc[i]=' ' Then
        Begin
          Campo := Copy(campoloc,i+1,length(campoloc)-i);
          Break;
        End;
    except
    end;
    try
      Nome:=Trim(ENomeLocaliz.text);
    except
    end;
    If locate(campo,Nome, [loCaseInsensitive]) Then
      Result:=True
    else
      Result:=False;
  End;
end;

{ Localiza um Ítem de Inventário }
function TItem_de_Inventario.LocalizarCod(CdIIV, CdCNC: Integer): Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CdIIV<>CodigoIIV) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO; IIV_CODIGO', vararrayof([CdCNC, CdIIV]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TItem_de_Inventario.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TItem_de_Inventario.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 ProximoCodigo('IIV_CODIGO');
  Try
   ECodigoPRD.KeyValue := 0;
   Except
  End;
  Try
   ECodigoINV.KeyValue := 0;
   Except
  End;
  Try
   EQuantSist.Clear;
   Except
  End;
  Try
   EQuantInf.Clear;
   Except
  End;
  Try
   EContador.Clear;
   Except
  End;
  AtualizaControles(True);
  Estado:=1;
end;

function TItem_de_Inventario.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
