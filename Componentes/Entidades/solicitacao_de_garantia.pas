{ ****************************************************************** }
{                                                                    }
{   VCL component TSolicitacao_de_Garantia                           }
{                                                                    }
{   Solicitação de Garantia da Empresa                               }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file c:\eletro guerra\classe\principal\solicitacao_de_garantia.cd }
{   on 17 July 2004 at 14:49                                         }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Solicitacao_de_garantia;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Produto, Configuracao, Dbgrids, Funcoes, 
     Variants;

type
  TSolicitacao_de_Garantia = class(TSQuery)
    private
      { Private fields of TSolicitacao_de_Garantia }
        { Storage for property CNC_Codigo_Ent }
        FCNC_Codigo_Ent : Integer;
        { Storage for property CProduto }
        FCProduto : TProduto;
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoPRD }
        FCodigoPRD : Integer;
        { Storage for property CodigoSGR }
        FCodigoSGR : Integer;
        { Storage for property Data }
        FData : Tdatetime;
        { Storage for property DataAtual }
        FDataAtual : Tdatetime;
        { Storage for property ECNC_Codigo_Ent }
        FECNC_Codigo_Ent : TDBLookupComboBox;
        { Storage for property ECodigoPRD }
        FECodigoPRD : TDBLookupComboBox;
        { Storage for property ECodigoSGR }
        FECodigoSGR : TEdit;
        { Storage for property EData }
        FEData : TMaskEdit;
        { Storage for property EDataAtual }
        FEDataAtual : TMaskEdit;
        { Storage for property EDbgrid }
        FEDbgrid : TDBGrid;
        { Storage for property EEnt_Codigo }
        FEEnt_Codigo : TDBLookupComboBox;
        { Storage for property EOBS }
        FEOBS : TMemo;
        { Storage for property ESituacao }
        FESituacao : TCombobox;
        { Storage for property ETipoEnt }
        FETipoEnt : TComboBox;
        { Storage for property Ent_Codigo }
        FEnt_Codigo : Integer;
        { Storage for property OBS }
        FOBS : String;
        { Storage for property Situacao }
        FSituacao : Integer;
        { Storage for property TipoEnt }
        FTipoEnt : Integer;

      { Private methods of TSolicitacao_de_Garantia }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CNC_Codigo_Ent }
        function GetCNC_Codigo_Ent : Integer;
        { Write method for property CNC_Codigo_Ent }
        procedure SetCNC_Codigo_Ent(Value : Integer);
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoPRD }
        function GetCodigoPRD : Integer;
        { Write method for property CodigoPRD }
        procedure SetCodigoPRD(Value : Integer);
        { Read method for property CodigoSGR }
        function GetCodigoSGR : Integer;
        { Write method for property CodigoSGR }
        procedure SetCodigoSGR(Value : Integer);
        { Read method for property Data }
        function GetData : Tdatetime;
        { Write method for property Data }
        procedure SetData(Value : Tdatetime);
        { Read method for property DataAtual }
        function GetDataAtual : Tdatetime;
        { Write method for property DataAtual }
        procedure SetDataAtual(Value : Tdatetime);
        { Read method for property Ent_Codigo }
        function GetEnt_Codigo : Integer;
        { Write method for property Ent_Codigo }
        procedure SetEnt_Codigo(Value : Integer);
        { Read method for property OBS }
        function GetOBS : String;
        { Write method for property OBS }
        procedure SetOBS(Value : String);
        { Read method for property Situacao }
        function GetSituacao : Integer;
        { Write method for property Situacao }
        procedure SetSituacao(Value : Integer);
        { Read method for property TipoEnt }
        function GetTipoEnt : Integer;
        { Write method for property TipoEnt }
        procedure SetTipoEnt(Value : Integer);

    protected
      { Protected fields of TSolicitacao_de_Garantia }

      { Protected methods of TSolicitacao_de_Garantia }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TSolicitacao_de_Garantia }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TSolicitacao_de_Garantia }
        { Altera uma solicitação de garantia }
        function Alterar(CdCNC, CdSGR, CdPRD, PCNC_Codigo_Ent, PEnt_Codigo, PTipoEnt, PSituacao: integer; PData, PDataAtual:TDateTime; POBS: String):boolean;
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC,CdSGR:Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        { Insere uma solicitação de garantia }
        function Inserir(CdCNC, CdSGR, CdPRD, PTipoEnt,  PCNC_Codigo_Ent, PEnt_Codigo, PSituacao: integer;PData, PDataAtual:TDateTime; POBS: String):boolean;
        function InserirAuto:Boolean;
        { Localiza uma solicitação de garantia }
        function LocalizarCod(CdSGR,CdCNC:Integer):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TSolicitacao_de_Garantia }
        property CNC_Codigo_Ent : Integer
             read GetCNC_Codigo_Ent write SetCNC_Codigo_Ent;
        property CProduto : TProduto read FCProduto write FCProduto;
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        { Código do Produto }
        property CodigoPRD : Integer read GetCodigoPRD write SetCodigoPRD;
        { Código da solicitação de garantia }
        property CodigoSGR : Integer read GetCodigoSGR write SetCodigoSGR;
        property Data : Tdatetime read GetData write SetData;
        property DataAtual : Tdatetime read GetDataAtual write SetDataAtual;
        property ECNC_Codigo_Ent : TDBLookupComboBox
             read FECNC_Codigo_Ent write FECNC_Codigo_Ent;
        property ECodigoPRD : TDBLookupComboBox
             read FECodigoPRD write FECodigoPRD;
        property ECodigoSGR : TEdit read FECodigoSGR write FECodigoSGR;
        property EData : TMaskEdit read FEData write FEData;
        property EDataAtual : TMaskEdit read FEDataAtual write FEDataAtual;
        property EDbgrid : TDBGrid read FEDbgrid write FEDbgrid;
        property EEnt_Codigo : TDBLookupComboBox
             read FEEnt_Codigo write FEEnt_Codigo;
        property EOBS : TMemo read FEOBS write FEOBS;
        property ESituacao : TCombobox read FESituacao write FESituacao;
        property ETipoEnt : TComboBox read FETipoEnt write FETipoEnt;
        property Ent_Codigo : Integer read GetEnt_Codigo write SetEnt_Codigo;
        property OBS : String read GetOBS write SetOBS;
        property Situacao : Integer read GetSituacao write SetSituacao;
        property TipoEnt : Integer read GetTipoEnt write SetTipoEnt;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TSolicitacao_de_Garantia with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TSolicitacao_de_Garantia]);
end;

{ Method to set variable and property values and create objects }
procedure TSolicitacao_de_Garantia.AutoInitialize;
begin
     Estado := 0;
     FECNC_Codigo_Ent := nil;
     FECodigoPRD := nil;
     FECodigoSGR := nil;
     FEData := nil;
     FEDataAtual := nil;
     FEDbgrid := nil;
     FEEnt_Codigo := nil;
     FEOBS := nil;
     FESituacao := nil;
     FETipoEnt := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TSolicitacao_de_Garantia.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECNC_Codigo_Ent then
        FECNC_Codigo_Ent := nil;
     if AComponent = FECodigoPRD then
        FECodigoPRD := nil;
     if AComponent = FECodigoSGR then
        FECodigoSGR := nil;
     if AComponent = FEData then
        FEData := nil;
     if AComponent = FEDataAtual then
        FEDataAtual := nil;
     if AComponent = FEDbgrid then
        FEDbgrid := nil;
     if AComponent = FEEnt_Codigo then
        FEEnt_Codigo := nil;
     if AComponent = FEOBS then
        FEOBS := nil;
     if AComponent = FESituacao then
        FESituacao := nil;
     if AComponent = FETipoEnt then
        FETipoEnt := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TSolicitacao_de_Garantia.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CNC_Codigo_Ent }
function TSolicitacao_de_Garantia.GetCNC_Codigo_Ent : Integer;
begin
  try
    Result := Self.fieldByName('SGR_CNC_CODIGO_ENT').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CNC_Codigo_Ent }
procedure TSolicitacao_de_Garantia.SetCNC_Codigo_Ent(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('SGR_CNC_CODIGO_ENT').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "SGR_CNC_CODIGO_ENT"!');
  end;
end;

{ Read method for property CodigoCNC }
function TSolicitacao_de_Garantia.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TSolicitacao_de_Garantia.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoPRD }
function TSolicitacao_de_Garantia.GetCodigoPRD : Integer;
begin
  try
    Result := Self.fieldByName('PRD_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoPRD }
procedure TSolicitacao_de_Garantia.SetCodigoPRD(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('PRD_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "PRD_CODIGO"!');
    end;
end;

{ Read method for property CodigoSGR }
function TSolicitacao_de_Garantia.GetCodigoSGR : Integer;
begin
  try
    Result := Self.fieldByName('SGR_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoSGR }
procedure TSolicitacao_de_Garantia.SetCodigoSGR(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('SGR_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "SGR_CODIGO"!');
    end;
end;

{ Read method for property Data }
function TSolicitacao_de_Garantia.GetData : Tdatetime;
begin
  try
    Result := Self.fieldByName('SGR_DATA').asDateTime;
  except
    Result := 0;
  end;
end;

{ Write method for property Data }
procedure TSolicitacao_de_Garantia.SetData(Value : Tdatetime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('SGR_DATA').asDatetime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "SGR_DATA"!');
  end;
end;

{ Read method for property DataAtual }
function TSolicitacao_de_Garantia.GetDataAtual : Tdatetime;
begin
  try
    Result := Self.fieldByName('SGR_DATA_ATUAL').asDateTime;
  except
    Result := 0;
  end;
end;

{ Write method for property DataAtual }
procedure TSolicitacao_de_Garantia.SetDataAtual(Value : Tdatetime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('SGR_DATA_ATUAL').asDateTime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "SGR_DATA_ATUAL"!');
  end;
end;

{ Read method for property Ent_Codigo }
function TSolicitacao_de_Garantia.GetEnt_Codigo : Integer;
begin
  try
    Result := Self.fieldByName('SGR_ENT_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property Ent_Codigo }
procedure TSolicitacao_de_Garantia.SetEnt_Codigo(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('SGR_ENT_CODIGO').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "SGR_ENT_CODIGO"!');
  end;
end;

{ Read method for property OBS }
function TSolicitacao_de_Garantia.GetOBS : String;
begin
  try
    Result := Self.fieldByName('SGR_OBSERVACAO').asString;
  except
    result:= ''
  end;
end;

{ Write method for property OBS }
procedure TSolicitacao_de_Garantia.SetOBS(Value : String);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('SGR_OBSERVACAO').asString := Value;
  except
    ShowMessage('Não foi possível alterar o campo "SGR_OBSERVACAO"!');
  end;
end;

{ Read method for property Situacao }
function TSolicitacao_de_Garantia.GetSituacao : Integer;
begin
  try
    Result := Self.fieldByName('SGR_SITUACAO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property Situacao }
procedure TSolicitacao_de_Garantia.SetSituacao(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('SGR_SITUACAO').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "SGR_SITUACAO"!');
  end;
end;

{ Read method for property TipoEnt }
function TSolicitacao_de_Garantia.GetTipoEnt : Integer;
begin
  try
    result := Self.fieldByName('SGR_TIPO_ENT').asInteger;
  except
    Result := 0;
  end;
end;

{ Write method for property TipoEnt }
procedure TSolicitacao_de_Garantia.SetTipoEnt(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('SGR_TIPO_ENT').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "SGR_TIPO_ENT"!');
    end;
end;

{ Altera uma solicitação de garantia }
function TSolicitacao_de_Garantia.Alterar(CdCNC, CdSGR, CdPRD, PCNC_Codigo_Ent, PEnt_Codigo, PTipoEnt, PSituacao: integer; PData, PDataAtual:TDateTime; POBS: String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result := true;
  If not(localizarCod(CdSGR,CdCNC)) Then
  begin
    result := false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      CodigoPRD      := CdPRD;
      TipoEnt        := PTipoEnt;
      CNC_Codigo_Ent := PCNC_Codigo_Ent;
      Ent_Codigo     := PEnt_Codigo;
      Data           := PData;
      DataAtual      := PDataAtual;
      Situacao       := PSituacao;
      Obs            := POBS;

      try
        Post;

      except
        result := false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result := false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TSolicitacao_de_Garantia.AlterarAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
    try
      edit;
      try
         CodigoPRD  := ECodigoPRD.KeyValue;
      except
      end;
      try
         TipoEnt := ETipoEnt.ItemIndex;
      except
      end;
      try
         CNC_Codigo_Ent := ECNC_Codigo_Ent.KeyValue;
      except
      end;
      try
         Ent_Codigo := EEnt_Codigo.KeyValue;
      except
      end;
      try
         Data := StrToDateTime(EData.Text);
      except
      end;
      try
         DataAtual := StrToDateTime(EDataAtual.Text);
      except
      end;
      try
         Situacao := ESITUACAO.Itemindex;
      except
      end;
      try
         Obs := EOBS.Text;
      except
      end;

      try
        Post;
        Result:=True;

      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TSolicitacao_de_Garantia.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   EDbgrid.Enabled           :=not Habilitar;
 except
 end;
 try
   ECodigoPRD.Enabled       :=Habilitar;
   except
 end;
 try
   ETipoEnt.Enabled         :=Habilitar;
   except
 end;
 try
   ECNC_Codigo_Ent.Enabled  :=Habilitar;
   except
 end;
 try
   EEnt_Codigo.Enabled      :=Habilitar;
   except
 end;
 try
   EData.Enabled            :=Habilitar;
   except
 end;
 try
   EDataAtual.Enabled       :=Habilitar;
   except
 end;
 try
   ESituacao.Enabled        :=Habilitar;
   except
 end;
 try
   EOBS.Enabled             :=Habilitar;
   except
 end;
end;

procedure TSolicitacao_de_Garantia.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TSolicitacao_de_Garantia.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 try
   ECodigoSGR.Text         :=IntToStr(CodigoSGR);
 except
 end;
 try
   ECodigoPRD.KeyValue     :=CodigoPRD;
 except
 end;
 try
   ETipoEnt.ItemIndex      :=TipoEnt;
 except
 end;
 try
   ECNC_Codigo_Ent.KeyValue:=CNC_Codigo_Ent;
 except
 end;
 try
   EEnt_Codigo.KeyValue    :=Ent_Codigo;
 except
 end;
 try
    if Data=0 then
      EData.Text      :=''
    else
      EData.Text              :=FormatDateTime('dd/mm/yyyy', Data);
 except
 end;
 try
    if DataAtual=0 then
       EDataAtual.Text      :=''
    else
       EDataAtual.Text         :=FormatDateTime('dd/mm/yyyy', DataAtual);
 except
 end;
 try
   ESITUACAO.itemindex     :=Situacao;
 except
 end;
 try
   EOBS.Text               :=Obs;
 except
 end;
end;

constructor TSolicitacao_de_Garantia.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TSolicitacao_de_Garantia.Deletar(CdCNC,CdSGR:Integer);
begin
  If not(localizarCod(CdSGR,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
      if TQuery(Self).isEmpty then
      begin
        try
          ECodigoSGR.Clear;
        except
        end;
        try
          ECNC_Codigo_Ent.KeyValue := 0;
        except
        end;
        try
          ECodigoPRD.KeyValue := 0;
        except
        end;
        try
          EEnt_Codigo.KeyValue := 0;
        except
        end;
        try
          ETipoEnt.Text := '';
        except
        end;
        try
          EData.Clear;
        except
        end;
        try
          EDataAtual.Clear;
          except
        end;
        try
          ESituacao.Text := '';
          except
        end;
        try
          EOBS.Clear;
          except
        end;
      end;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TSolicitacao_de_Garantia.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TSolicitacao_de_Garantia.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod, cdcnc:Integer;
  mensagem:string;
begin
  mensagem:='';
  If not Verificadata(EData.text) Then
    mensagem:=mensagem+'Data incorreta!'+#13;
  if not verificadata(EDataAtual.text) then
    mensagem:= mensagem + 'Data atual incorreta!';
  If mensagem <>'' Then
    raise Exception.Create(mensagem);
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
    LocalizarCod(SCodigo,CodigoCNC);
  End;

  If Estado=2 then
  Begin
    cod:=codigoSGR;
    cdcnc:=codigoCNC;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

{ Insere uma solicitação de garantia }
function TSolicitacao_de_Garantia.Inserir(CdCNC, CdSGR, CdPRD, PTipoEnt,  PCNC_Codigo_Ent, PEnt_Codigo, PSituacao: integer;PData, PDataAtual:TDateTime; POBS: String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Cod: Integer;
begin
  if CdSGR=0 then
    Cod    := ProximoCodigo('SGR_CODIGO')
  else
    Cod    := CdSGR;
  If (localizarCod(Cod,CdCNC)) Then
  begin
    ShowMessage('Não foi possível inserir o registro corrente pois o mesmo já existe!');
    result:=false;
  end
  Else
  begin
      result := true;
      Insert;
      try
        CodigoSGR      := Cod;
        CodigoCNC      := CdCNC;
        CodigoPRD      := CdPRD;
        TipoEnt        := PTipoEnt;
        CNC_Codigo_Ent := PCNC_Codigo_Ent;
        Ent_Codigo     := PEnt_Codigo;
        Data           := PData;
        DataAtual      := PDataAtual;
        Situacao       := PSituacao;
        Obs            := POBS;

        try
          Post;

        except
          result := false;
          Cancel;
          ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
        end;
      except
        result := false;
        ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
      end;
  end;
end;

function TSolicitacao_de_Garantia.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Aux:TDataSetNotifyEvent;
begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
        CodigoSGR   := SCodigo;
      except
      end;
      try
        codigocnc   := CConfiguracao.CodigoCNC;
      except
      end;
      try
         CodigoPRD  := ECodigoPRD.KeyValue;
      except
      end;
      try
         TipoEnt := ETipoEnt.ItemIndex;
      except
      end;
      try
         CNC_Codigo_Ent := ECNC_Codigo_Ent.KeyValue;
      except
      end;
      try
         Ent_Codigo := EEnt_Codigo.KeyValue;
      except
      end;
      try
         Data := StrToDateTime(EData.Text);
      except
      end;
      try
         DataAtual := StrToDateTime(EDataAtual.Text);
      except
      end;
      try
         Situacao := ESituacao.Itemindex;
      except
      end;
      try
         Obs := EOBS.Text;
      except
      end;

      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;

      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TSolicitacao_de_Garantia.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

{ Localiza uma solicitação de garantia }
function TSolicitacao_de_Garantia.LocalizarCod(CdSGR,CdCNC:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CdSGR<>CodigoSGR) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO;SGR_CODIGO', vararrayof([CdCNC, CdSGR]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TSolicitacao_de_Garantia.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TSolicitacao_de_Garantia.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 ProximoCodigo('SGR_CODIGO');
 try
   ECNC_Codigo_Ent.KeyValue := 0;
 except
 end;
 try
   ECodigoPRD.KeyValue := 0;
 except
 end;
 try
   EEnt_Codigo.KeyValue := 0;
 except
 end;
 try
   ETipoEnt.Text := '';
 except
 end;
 try
   EData.Clear;
 except
 end;
 try
   EDataAtual.Clear;
   except
 end;
 try
   ESituacao.Text := '';
   except
 end;
 try
   EOBS.Clear;
   except
 end;
  AtualizaControles(True);
  Estado:=1;
end;

function TSolicitacao_de_Garantia.deletarauto:Boolean;
begin
  Result := False; 
  try
    if Delete then
    Begin
      result:=true;
      GeraLog(1230,CodigoCNC,CodigoSGR,'34');
    end;
  Except
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
