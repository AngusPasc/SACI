{ ****************************************************************** }
{                                                                    }
{   VCL component TFatorFinanceira                                   }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file p:\eletro guerra\classe\principal\fator_financeira.cd }
{   on 22 July 1999 at 15:10                                         }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit FatorFinanceira;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Configuracao;

type
  TFatorFinanceira = class(TSQuery)
    private
      { Private fields of TFatorFinanceira }
        { Storage for property CodigoAGF }
        FCodigoAGF : Integer;
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoFAF }
        FCodigoFAF : Integer;
        { Storage for property ECampoLocaliz }
        FECampoLocaliz : TComboBox;
        { Storage for property ECodigoAGF }
        FECodigoAGF : TEdit;
        { Storage for property ECodigoFAF }
        FECodigoFAF : TEdit;
        { Storage for property EFator }
        FEFator : TEdit;
        { Storage for property ENomeLocaliz }
        FENomeLocaliz : TEdit;
        { Storage for property ENumParc }
        FENumParc : TEdit;
        { Storage for property Fator }
        FFator : Double;
        { Storage for property NumParc }
        FNumParc : Integer;

      { Private methods of TFatorFinanceira }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoAGF }
        function GetCodigoAGF : Integer;
        { Write method for property CodigoAGF }
        procedure SetCodigoAGF(Value : Integer);
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoFAF }
        function GetCodigoFAF : Integer;
        { Write method for property CodigoFAF }
        procedure SetCodigoFAF(Value : Integer);
        { Read method for property Fator }
        function GetFator : Double;
        { Write method for property Fator }
        procedure SetFator(Value : Double);
        { Read method for property NumParc }
        function GetNumParc : Integer;
        { Write method for property NumParc }
        procedure SetNumParc(Value : Integer);

    protected
      { Protected fields of TFatorFinanceira }

      { Protected methods of TFatorFinanceira }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TFatorFinanceira }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TFatorFinanceira }
        { Altera um Agente Financeiro }
        function Alterar(CdCNC,CdFAF,CdAGF,PNumParc: integer; PFator:Real):boolean;
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC,CdFAF:Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        procedure Importa;
        { Insere um Agente Financeiro }
        function Inserir(CdCNC,CdFAF,CdAGF,PNumParc: integer; PFator:Real):boolean;
        function InserirAuto:Boolean;
        function Localizar:boolean;
        { Localiza um Agente Financeiro }
        function LocalizarCod(CdFAF,CdCNC:Integer):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TFatorFinanceira }
        { Código do Agente Financeiro }
        property CodigoAGF : Integer read GetCodigoAGF write SetCodigoAGF;
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        property CodigoFAF : Integer read GetCodigoFAF write SetCodigoFAF;
        property ECampoLocaliz : TComboBox
             read FECampoLocaliz write FECampoLocaliz;
        property ECodigoAGF : TEdit read FECodigoAGF write FECodigoAGF;
        property ECodigoFAF : TEdit read FECodigoFAF write FECodigoFAF;
        property EFator : TEdit read FEFator write FEFator;
        property ENomeLocaliz : TEdit read FENomeLocaliz write FENomeLocaliz;
        property ENumParc : TEdit read FENumParc write FENumParc;
        property Fator : Double read GetFator write SetFator;
        property NumParc : Integer read GetNumParc write SetNumParc;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TFatorFinanceira with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TFatorFinanceira]);
end;

{ Method to set variable and property values and create objects }
procedure TFatorFinanceira.AutoInitialize;
begin
     Estado := 0;
     FECampoLocaliz := nil;
     FECodigoAGF := nil;
     FECodigoFAF := nil;
     FEFator := nil;
     FENomeLocaliz := nil;
     FENumParc := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TFatorFinanceira.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECampoLocaliz then
        FECampoLocaliz := nil;
     if AComponent = FECodigoAGF then
        FECodigoAGF := nil;
     if AComponent = FECodigoFAF then
        FECodigoFAF := nil;
     if AComponent = FEFator then
        FEFator := nil;
     if AComponent = FENomeLocaliz then
        FENomeLocaliz := nil;
     if AComponent = FENumParc then
        FENumParc := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TFatorFinanceira.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoAGF }
function TFatorFinanceira.GetCodigoAGF : Integer;
begin
  try
    Result := Self.fieldByName('AGF_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoAGF }
procedure TFatorFinanceira.SetCodigoAGF(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('AGF_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "AGF_CODIGO"!');
    end;
end;

{ Read method for property CodigoCNC }
function TFatorFinanceira.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TFatorFinanceira.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoFAF }
function TFatorFinanceira.GetCodigoFAF : Integer;
begin
  try
    Result := Self.fieldByName('FAF_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoFAF }
procedure TFatorFinanceira.SetCodigoFAF(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('FAF_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "FAF_CODIGO"!');
    end;
end;

{ Read method for property Fator }
function TFatorFinanceira.GetFator : Double;
begin
  try
    Result := Self.fieldByName('FAF_FATOR').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property Fator }
procedure TFatorFinanceira.SetFator(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('FAF_FATOR').asFloat := Value;
  except
    ShowMessage('Não foi possível alterar o campo "FAF_FATOR"!');
  end;
end;

{ Read method for property NumParc }
function TFatorFinanceira.GetNumParc : Integer;
begin
  try
    Result := Self.fieldByName('FAF_NPARC').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property NumParc }
procedure TFatorFinanceira.SetNumParc(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('FAF_NPARC').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "FAF_NPARC"!');
    end;
end;

{ Altera um Agente Financeiro }
function TFatorFinanceira.Alterar(CdCNC,CdFAF,CdAGF,PNumParc: integer; PFator:Real):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result:=true;
  If not(localizarCod(CdFAF,CdCNC)) Then
  begin
    result:=false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      NumParc        := PNumParc;
      Fator          := PFator;

      try
        Post;
      except
        result:=false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TFatorFinanceira.AlterarAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
    try
      edit;
      try
         NumParc  := StrToInt(EnumParc.Text);
      except
      end;
      try
         Fator := StrToFloat(EFator.Text);
      except
      end;

      try
        Post;
        Result:=True;
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TFatorFinanceira.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   ENumParc.Enabled     :=Habilitar;
 except
 end;
 try
   EFator.Enabled         :=Habilitar;
 except
 end;
end;

procedure TFatorFinanceira.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TFatorFinanceira.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   ECodigoFAF.Text                :=IntToStr(CodigoFAF);
   Except
  End;
 Try
   ENumParc.Text           :=IntToStr(NumParc);
 except
 end;
 try
   EFator.Text             :=Format('%.2n', [Fator]);
 except
 end;
end;

constructor TFatorFinanceira.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TFatorFinanceira.Deletar(CdCNC,CdFAF:Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdFAF,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TFatorFinanceira.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TFatorFinanceira.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod, cdcnc:Integer;
begin
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
  End;

  If Estado=2 then
  Begin
    cod:=codigoFAF;
    cdcnc:=codigoCNC;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

procedure TFatorFinanceira.Importa;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
with CTransfArq do
  begin
    SelecionaTipo(47, date);
    while not eof do
    begin
      if Metodo='01' then
        with TFatorFinanceira(ImportComponent) do
        begin
          Self.Inserir(CodigoCNC,CodigoFAF,CodigoAGF,NumParc,Fator);
        end;
      if Metodo='02' then
        with TFatorFinanceira(ImportComponent) do
        begin
          Self.Alterar(CodigoCNC,CodigoFAF,CodigoAGF,NumParc,Fator);
        end;
      if Metodo='03' then
        with TFatorFinanceira(ImportComponent) do
        begin
          Self.Deletar(CodigoCNC,CodigoFAF);
        end;
      next;
    end;
  end;
end;

{ Insere um Agente Financeiro }
function TFatorFinanceira.Inserir(CdCNC,CdFAF,CdAGF,PNumParc: integer; PFator:Real):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result:=true;
  Insert;
  if CdFAF=0 then
   CodigoFAF    := ProximoCodigo('FAF_CODIGO')
  Else
   CodigoFAF    := CdFAF;
  try
    CodigoCNC      := CdCNC;
    CodigoAGF      := CdAGF;
    NumParc        := PNumParc;
    Fator          := PFator;

    try
      Post;
    except
      result:=false;
      Cancel;
      ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
    end;
  except
    result:=false;
    ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
  end;
end;

function TFatorFinanceira.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Aux:TDataSetNotifyEvent;

begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;

      try
        CodigoCNC   := CConfiguracao.CodigoCNC;
      except
      end;
      try
        codigoFAF := SCodigo;
      except
      end;
      try
        CodigoAGF  := StrToInt(ECodigoAGF.Text);
      except
      end;
      try
        NumParc := StrToInt(ENumParc.Text);
      except
      end;
      try
        Fator := StrToFloat(EFator.Text);
      except
      end;

      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TFatorFinanceira.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

function TFatorFinanceira.Localizar:boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Campo,Nome,campoloc:String;
  i         :Integer;
begin
  If (ECampoLocaliz.Text<>'') and (ENomeLocaliz.text<>'') Then
  Begin
    try
      campoloc:=trim(ECampoLocaliz.Text);
      for i:= length(campoloc) downto 1 do
        If campoloc[i]=' ' Then
        Begin
          Campo := Copy(campoloc,i+1,length(campoloc)-i);
          Break;
        End;
    except
    end;
    try
      Nome:=Trim(ENomeLocaliz.text);
    except
    end;
    If locate(campo,Nome, [loCaseInsensitive]) Then
      Result:=True
    else
      Result:=False;
  End;
end;

{ Localiza um Agente Financeiro }
function TFatorFinanceira.LocalizarCod(CdFAF,CdCNC:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CdFAF<>CodigoFAF) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO;FAF_CODIGO', vararrayof([CdCNC, CdFAF]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TFatorFinanceira.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TFatorFinanceira.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 ProximoCodigo('FAF_CODIGO');
 try
   ENumParc.Clear;
 except
 end;
 try
   EFator.Clear;
 except
 end;

 try
  AtualizaControles(True);
 except
 end;

  Estado:=1;
end;

function TFatorFinanceira.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
