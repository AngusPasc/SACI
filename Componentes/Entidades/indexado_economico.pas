{ ****************************************************************** }
{                                                                    }
{   VCL component TIndexador_Economico                               }
{                                                                    }
{   Indexador Economico da Empresa                                   }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file c:\aplicativos\eletro guerra\classe\principal\indexador_economico.cd }
{   on 22 Aug 1999 at 17:46                                          }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Indexado_Economico;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Configuracao, Dbgrids;

type
  TIndexador_Economico = class(TSQuery)
    private
      { Private fields of TIndexador_Economico }
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoIDE }
        FCodigoIDE : Integer;
        { Storage for property DataAtualizacao }
        FDataAtualizacao : Tdatetime;
        { Storage for property Descricao }
        FDescricao : String;
        { Storage for property ECampoLocaliz }
        FECampoLocaliz : TComboBox;
        { Storage for property ECodigoIDE }
        FECodigoIDE : TEdit;
        { Storage for property EDataAtualizacao }
        FEDataAtualizacao : TMaskEdit;
        { Storage for property EDbgrid }
        FEDbgrid : TDBGrid;
        { Storage for property EDescricao }
        FEDescricao : TEdit;
        { Storage for property ENomeLocaliz }
        FENomeLocaliz : TEdit;
        { Storage for property EPeriodo }
        FEPeriodo : TComboBox;
        { Storage for property ETaxa }
        FETaxa : TEdit;
        { Storage for property Periodo }
        FPeriodo : Integer;
        { Storage for property Taxa }
        FTaxa : Double;

      { Private methods of TIndexador_Economico }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoIDE }
        function GetCodigoIDE : Integer;
        { Write method for property CodigoIDE }
        procedure SetCodigoIDE(Value : Integer);
        { Read method for property DataAtualizacao }
        function GetDataAtualizacao : Tdatetime;
        { Write method for property DataAtualizacao }
        procedure SetDataAtualizacao(Value : Tdatetime);
        { Read method for property Descricao }
        function GetDescricao : String;
        { Write method for property Descricao }
        procedure SetDescricao(Value : String);
        { Read method for property Periodo }
        function GetPeriodo : Integer;
        { Write method for property Periodo }
        procedure SetPeriodo(Value : Integer);
        { Read method for property Taxa }
        function GetTaxa : Double;
        { Write method for property Taxa }
        procedure SetTaxa(Value : Double);

    protected
      { Protected fields of TIndexador_Economico }

      { Protected methods of TIndexador_Economico }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TIndexador_Economico }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TIndexador_Economico }
        { Altera um Cliente }
        function Alterar(CdCNC, CdIDE,  PPeriodo: integer; PTaxa: Double; PDescricao, DT_Atualizacao: String):boolean;
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC,CdIDE:Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        { Insere um Cliente }
        function Inserir(CdCNC, CdIDE, PPeriodo: integer; PTaxa: Double; PDescricao, DT_Atualizacao: String):boolean;
        function InserirAuto:Boolean;
        function Localizar:boolean;
        { Localiza um cliente }
        function LocalizarCod(CdIDE,CdCNC:Integer):Boolean;
        function LocalizarNome(Nome:String):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TIndexador_Economico }
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        { Código do Indexador Economico }
        property CodigoIDE : Integer read GetCodigoIDE write SetCodigoIDE;
        property DataAtualizacao : Tdatetime
             read GetDataAtualizacao write SetDataAtualizacao;
        property Descricao : String read GetDescricao write SetDescricao;
        property ECampoLocaliz : TComboBox
             read FECampoLocaliz write FECampoLocaliz;
        property ECodigoIDE : TEdit read FECodigoIDE write FECodigoIDE;
        property EDataAtualizacao : TMaskEdit
             read FEDataAtualizacao write FEDataAtualizacao;
        property EDbgrid : TDBGrid read FEDbgrid write FEDbgrid;
        property EDescricao : TEdit read FEDescricao write FEDescricao;
        property ENomeLocaliz : TEdit read FENomeLocaliz write FENomeLocaliz;
        property EPeriodo : TComboBox read FEPeriodo write FEPeriodo;
        property ETaxa : TEdit read FETaxa write FETaxa;
        property Periodo : Integer read GetPeriodo write SetPeriodo;
        property Taxa : Double read GetTaxa write SetTaxa;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TIndexador_Economico with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TIndexador_Economico]);
end;

{ Method to set variable and property values and create objects }
procedure TIndexador_Economico.AutoInitialize;
begin
     Estado := 0;
     FECampoLocaliz := nil;
     FECodigoIDE := nil;
     FEDataAtualizacao := nil;
     FEDbgrid := nil;
     FEDescricao := nil;
     FENomeLocaliz := nil;
     FEPeriodo := nil;
     FETaxa := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TIndexador_Economico.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECampoLocaliz then
        FECampoLocaliz := nil;
     if AComponent = FECodigoIDE then
        FECodigoIDE := nil;
     if AComponent = FEDataAtualizacao then
        FEDataAtualizacao := nil;
     if AComponent = FEDbgrid then
        FEDbgrid := nil;
     if AComponent = FEDescricao then
        FEDescricao := nil;
     if AComponent = FENomeLocaliz then
        FENomeLocaliz := nil;
     if AComponent = FEPeriodo then
        FEPeriodo := nil;
     if AComponent = FETaxa then
        FETaxa := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TIndexador_Economico.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCNC }
function TIndexador_Economico.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TIndexador_Economico.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoIDE }
function TIndexador_Economico.GetCodigoIDE : Integer;
begin
  try
    Result := Self.fieldByName('IDE_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoIDE }
procedure TIndexador_Economico.SetCodigoIDE(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IDE_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IDE_CODIGO"!');
    end;
end;

{ Read method for property DataAtualizacao }
function TIndexador_Economico.GetDataAtualizacao : Tdatetime;
begin
  try
    Result := Self.fieldByName('IDE_DT_ATUALIZACAO').asDateTime;
  except
  end;
end;

{ Write method for property DataAtualizacao }
procedure TIndexador_Economico.SetDataAtualizacao(Value : Tdatetime);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IDE_DT_ATUALIZACAO').asDatetime := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IDE_DT_ATUALIZACAO"!');
  end;
end;

{ Read method for property Descricao }
function TIndexador_Economico.GetDescricao : String;
begin
  try
    Result := Self.fieldByName('IDE_DESCRICAO').asString;
  except
    result:= ''
  end;
end;

{ Write method for property Descricao }
procedure TIndexador_Economico.SetDescricao(Value : String);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('IDE_DESCRICAO').asString := Value;
  except
    ShowMessage('Não foi possível alterar o campo "IDE_DESCRICAO"!');
  end;
end;

{ Read method for property Periodo }
function TIndexador_Economico.GetPeriodo : Integer;
begin
  try
    result := Self.fieldByName('IDE_PERIODO').asInteger;
  except
  end;
end;

{ Write method for property Periodo }
procedure TIndexador_Economico.SetPeriodo(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IDE_PERIODO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IDE_PERIODO"!');
    end;
end;

{ Read method for property Taxa }
function TIndexador_Economico.GetTaxa : Double;
begin
  try
    Result := Self.fieldByName('IDE_TAXA').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property Taxa }
procedure TIndexador_Economico.SetTaxa(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IDE_TAXA').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IDE_TAXA"!');
    end;
end;

{ Altera um Cliente }
function TIndexador_Economico.Alterar(CdCNC, CdIDE,  PPeriodo: integer; PTaxa: Double; PDescricao, DT_Atualizacao: String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result := true;
  If not(localizarCod(CdIDE,CdCNC)) Then
  begin
    result := false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      Descricao       := PDescricao;
      Taxa            := PTaxa;
      Periodo         := PPeriodo;
      DataAtualizacao := StrToDateTime(DT_Atualizacao);

      try
        Post;
      except
        result := false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result := false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TIndexador_Economico.AlterarAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
    try
      edit;
      try
         Descricao := EDescricao.Text;
      except
      end;
      try
         Taxa := StrToFloat(ETaxa.Text);
      except
      end;
      try
         Periodo := StrToInt(EPeriodo.Text);
      except
      end;
      try
         DataAtualizacao := StrToDateTime(EDataAtualizacao.Text);
      except
      end;
      try
        Post;
        Result:=True;
        GeraLog(440,CodigoCNC,CodigoIDE,'14',Now);
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TIndexador_Economico.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   EDbgrid.Enabled           :=not Habilitar;
 except
 end;
 try
   EDescricao.Enabled        :=Habilitar;
   except
 end;
 try
   ETaxa.Enabled             :=Habilitar;
   except
 end;
 try
   EPeriodo.Enabled          :=Habilitar;
   except
 end;
end;

procedure TIndexador_Economico.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TIndexador_Economico.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 Try
   ECodigoIDE.Text           :=IntToStr(CodigoIDE);
   except
 end;
 try
   EDescricao.Text           :=Descricao;
   except
 end;
 try
   ETaxa.Text                :=Format('%.2f', [Taxa]);
   except
 end;
 try
   EPeriodo.Text             :=IntToStr(Periodo);
   except
 end;
 try
   EDataAtualizacao.Text     :=FormatDateTime('dd/mm/yyyy', DataAtualizacao);
   except
 end;

end;

constructor TIndexador_Economico.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TIndexador_Economico.Deletar(CdCNC,CdIDE:Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdIDE,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
      if Tquery(Self).isEmpty then
      begin
        try
          ECodigoIDE.Clear;
          except
        end;
        try
          EDescricao.Clear;
          except
        end;
        try
          ETaxa.Clear;
          except
        end;
        try
          EPeriodo.Clear;
          except
        end;
        try
          EDataAtualizacao.Text:=DateToStr(now);
          except
        end;
      end;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TIndexador_Economico.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TIndexador_Economico.FinalizaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
var
  cod, cdcnc:Integer;
  mensagem:string;
begin
  mensagem:='';
  if not VerificaFloatBranco(ETaxa.text) then
    mensagem:=mensagem+'Taxa digitada incorretamente ou vazia!';
  if mensagem<>'' then
    raise exception.create(mensagem);
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
    LocalizarCod(SCodigo,CodigoCNC);
  End;

  If Estado=2 then
  Begin
    cod:=codigoIDE;
    cdcnc:=codigoCnc;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

{ Insere um Cliente }
function TIndexador_Economico.Inserir(CdCNC, CdIDE, PPeriodo: integer; PTaxa: Double; PDescricao, DT_Atualizacao: String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result := true;
 if CdIDE=0 then
   CodigoIDE    := ProximoCodigo('IDE_CODIGO')
 else
   CodigoIDE      := CdIDE;
    try
      CodigoCNC      := CdCNC;
      Descricao       := PDescricao;
      Taxa            := PTaxa;
      Periodo         := PPeriodo;
      DataAtualizacao := StrToDateTime(DT_Atualizacao);

      try
        Post;
      except
        result := false;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
      end;
    except
      result := false;
      ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

function TIndexador_Economico.InserirAuto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Aux:TDataSetNotifyEvent;
begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
        CodigoIDE   := SCodigo;
      except
      end;
      try
        codigocnc   := CConfiguracao.CodigoCNC;
      except
      end;
      try
         Descricao := EDescricao.Text;
      except
      end;
      try
         Taxa := StrToFloat(ETaxa.Text);
      except
      end;
      try
         Periodo := StrToInt(EPeriodo.Text);
      except
      end;
      try
         DataAtualizacao := StrToDateTime(EDataAtualizacao.Text);
      except
      end;
      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
        GeraLog(420,CodigoCNC,CodigoIDE,'14',Now);
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TIndexador_Economico.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }
  Filtered:=False;
end;

function TIndexador_Economico.Localizar:boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Campo,Nome,campoloc:String;
  i         :Integer;
begin
  If (ECampoLocaliz.Text<>'') and (ENomeLocaliz.text<>'') Then
  Begin
    try
      campoloc:=trim(ECampoLocaliz.Text);
      for i:= length(campoloc) downto 1 do
        If campoloc[i]=' ' Then
        Begin
          Campo := Copy(campoloc,i+1,length(campoloc)-i);
          Break;
        End;
    except
    end;
    try
      Nome:=Trim(ENomeLocaliz.text);
    except
    end;
    If locate(campo,Nome, [loCaseInsensitive]) Then
      Result:=True
    else
      Result:=False;
  End;
end;

{ Localiza um cliente }
function TIndexador_Economico.LocalizarCod(CdIDE,CdCNC:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CdIDE<>CodigoIDE) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO;IDE_CODIGO', vararrayof([CdCNC, CdIDE]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

function TIndexador_Economico.LocalizarNome(Nome:String):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If Nome<>Descricao Then
    If locate('IDE_DESCRICAO',Nome, []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TIndexador_Economico.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TIndexador_Economico.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
ProximoCodigo('IDE_CODIGO');
 try
   EDescricao.Clear;
   except
 end;
 try
   ETaxa.Clear;
   except
 end;
 try
   EPeriodo.Clear;
   except
 end;
 try
   EDataAtualizacao.Text:=DateToStr(now);
   except
 end;

  AtualizaControles(True);
  Estado:=1;
end;

function TIndexador_Economico.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
    result:=true;
    GeraLog(430,CodigoCNC,CodigoIDE,'14',Now);
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
