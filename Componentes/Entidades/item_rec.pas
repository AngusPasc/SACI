{ ****************************************************************** }
{                                                                    }
{   VCL component TItem_Recebimento                                  }
{                                                                    }
{   Item de Recebimento da Empresa                                   }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file p:\eletro guerra\classe\principal\item_de_recebimento.cd }
{   on 26 Aug 1999 at 18:44                                          }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit Item_Rec;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Recibo, Pedido_de_Compra, Embarque, Configuracao;

type
  TItem_Recebimento = class(TSQuery)
    private
      { Private fields of TItem_Recebimento }
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoIRC }
        FCodigoIRC : Integer;
        { Storage for property CodigoPRD }
        FCodigoPRD : Integer;
        { Storage for property CodigoREC }
        FCodigoREC : Integer;
        { Storage for property ECampoLocaliz }
        FECampoLocaliz : TComboBox;
        { Storage for property ECodigoIRC }
        FECodigoIRC : TEdit;
        { Storage for property ECodigoREC }
        FECodigoREC : TDBLookupComboBox;
        { Storage for property ENomeLocaliz }
        FENomeLocaliz : TEdit;
        { Storage for property EQuantidade }
        FEQuantidade : TEdit;
        { Storage for property Quantidade }
        FQuantidade : Double;

      { Private methods of TItem_Recebimento }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoIRC }
        function GetCodigoIRC : Integer;
        { Write method for property CodigoIRC }
        procedure SetCodigoIRC(Value : Integer);
        { Read method for property CodigoPRD }
        function GetCodigoPRD : Integer;
        { Write method for property CodigoPRD }
        procedure SetCodigoPRD(Value : Integer);
        { Read method for property CodigoREC }
        function GetCodigoREC : Integer;
        { Write method for property CodigoREC }
        procedure SetCodigoREC(Value : Integer);
        { Read method for property Quantidade }
        function GetQuantidade : Double;
        { Write method for property Quantidade }
        procedure SetQuantidade(Value : Double);

    protected
      { Protected fields of TItem_Recebimento }

      { Protected methods of TItem_Recebimento }
        { Resets prop of component type if referenced component deleted }
        procedure Notification(AComponent : TComponent; Operation : TOperation); override;
        procedure Loaded; override;

    public
      { Public fields and properties of TItem_Recebimento }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TItem_Recebimento }
        { Altera um Recebimento }
        function Alterar(CdCNC, CdIRC, CdREC, CdPRD: Integer;PQuantidade:Double):boolean;
        function AlterarAuto:Boolean;
        procedure AtualizaControles(Habilitar:Boolean);
        procedure CancelaEdicao;
        procedure CarregaDados;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC, CdIRC: Integer);
        destructor Destroy; override;
        procedure FinalizaEdicao;
        procedure Importa;
        { Insere um Recebimento }
        function Inserir(CdCNC,CdIRC, CdREC, CdPRD: Integer;PQuantidade:Double):boolean;
        function InserirAuto:Boolean;
        function Localizar:boolean;
        { Localiza um Recebimento }
        function LocalizarCod(CdIRC, CdCNC: Integer): Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TItem_Recebimento }
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        { Código do Recebimento }
        property CodigoIRC : Integer read GetCodigoIRC write SetCodigoIRC;
        property CodigoPRD : Integer read GetCodigoPRD write SetCodigoPRD;
        property CodigoREC : Integer read GetCodigoREC write SetCodigoREC;
        property ECampoLocaliz : TComboBox
             read FECampoLocaliz write FECampoLocaliz;
        property ECodigoIRC : TEdit read FECodigoIRC write FECodigoIRC;
        property ECodigoREC : TDBLookupComboBox
             read FECodigoREC write FECodigoREC;
        property ENomeLocaliz : TEdit read FENomeLocaliz write FENomeLocaliz;
        property EQuantidade : TEdit read FEQuantidade write FEQuantidade;
        property Quantidade : Double read GetQuantidade write SetQuantidade;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TItem_Recebimento with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TItem_Recebimento]);
end;

{ Method to set variable and property values and create objects }
procedure TItem_Recebimento.AutoInitialize;
begin
     Estado := 0;
     FECampoLocaliz := nil;
     FECodigoIRC := nil;
     FECodigoREC := nil;
     FENomeLocaliz := nil;
     FEQuantidade := nil;
end; { of AutoInitialize }

{ Resets prop of component type if referenced component deleted }
procedure TItem_Recebimento.Notification(AComponent : TComponent; Operation : TOperation);
begin
     inherited Notification(AComponent, Operation);
     if Operation <> opRemove then
        Exit;
     { Has a component referenced by a property of 
       this component been deleted?  If so, update 
       the property. }
     if AComponent = FECampoLocaliz then
        FECampoLocaliz := nil;
     if AComponent = FECodigoIRC then
        FECodigoIRC := nil;
     if AComponent = FECodigoREC then
        FECodigoREC := nil;
     if AComponent = FENomeLocaliz then
        FENomeLocaliz := nil;
     if AComponent = FEQuantidade then
        FEQuantidade := nil;
end;

{ Method to free any objects created by AutoInitialize }
procedure TItem_Recebimento.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCNC }
function TItem_Recebimento.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TItem_Recebimento.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoIRC }
function TItem_Recebimento.GetCodigoIRC : Integer;
begin
  try
    Result := Self.fieldByName('IRC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoIRC }
procedure TItem_Recebimento.SetCodigoIRC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IRC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IRC_CODIGO"!');
    end;
end;

{ Read method for property CodigoPRD }
function TItem_Recebimento.GetCodigoPRD : Integer;
begin
  try
    Result := Self.fieldByName('PRD_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoPRD }
procedure TItem_Recebimento.SetCodigoPRD(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('PRD_CODIGO').asInteger := Value;
  except
    ShowMessage('Não foi possível alterar o campo "PRD_CODIGO"!');
  end;
end;

{ Read method for property CodigoREC }
function TItem_Recebimento.GetCodigoREC : Integer;
begin
  try
    Result := Self.fieldByName('REC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoREC }
procedure TItem_Recebimento.SetCodigoREC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('REC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "REC_CODIGO"!');
    end;
end;

{ Read method for property Quantidade }
function TItem_Recebimento.GetQuantidade : Double;
begin
  try
    Result := Self.fieldByName('IRC_QUANTIDADE').asFloat;
  except
    result:= 0
  end;
end;

{ Write method for property Quantidade }
procedure TItem_Recebimento.SetQuantidade(Value : Double);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('IRC_QUANTIDADE').asFloat := Value;
    except
      ShowMessage('Não foi possível alterar o campo "IRC_QUANTIDADE"!');
    end;
end;

{ Altera um Recebimento }
function TItem_Recebimento.Alterar(CdCNC, CdIRC, CdREC, CdPRD: Integer;PQuantidade:Double):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result:=true;
  If not(localizarCod(CdIRC,CdCNC)) Then
  begin
    result:=false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      Quantidade     := PQuantidade;
      CodigoPRD      := CdPRD;
      try
        Post;
        if CentroDeCusto=0 then
          Exporta(53, CodigoCNC, CodigoIRC, -2, '02')
        else
          Exporta(53, CodigoCNC, CodigoIRC,  0, '02');
      except
        result:=false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

function TItem_Recebimento.AlterarAuto:Boolean;
begin
    try
      edit;
      try
        Quantidade := StrToFloat(EQuantidade.Text);
      except
      end;


      try
        Post;
        Result:=True;
        if CentroDeCusto=0 then
          Exporta(53, CodigoCNC, CodigoIRC, -2, '02')
        else
          Exporta(53, CodigoCNC, CodigoIRC,  0, '02');
      except
        Result:=False;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      Result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TItem_Recebimento.AtualizaControles(Habilitar:Boolean);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  Try
   EcodigoIRC.Enabled       :=Habilitar;
  Except
  End;
  Try
   EcodigoREC.Enabled       :=Habilitar;
   Except
  End;
  Try
   Equantidade.Enabled      :=Habilitar;
   Except
  End;
end;

procedure TItem_Recebimento.CancelaEdicao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(False);
  Estado:=0;
  CarregaDados;
end;

procedure TItem_Recebimento.CarregaDados;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  Try
   ECodigoIRC.Text                :=IntToStr(CodigoIRC);
   Except
  End;
  Try
   EcodigoREC.KeyValue      :=CodigoREC;
   Except
  End;
  Try
   Equantidade.Text         :=Format('%.2f', [Quantidade]);
   Except
  End;
end;

constructor TItem_Recebimento.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TItem_Recebimento.Deletar(CdCNC, CdIRC: Integer);
begin
  If not(localizarCod(CdIRC, CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
      if TQuery(Self).isEmpty then
      begin
        Try
         ECodigoIRC.Text  :='';
         Except
        End;
        Try
         ECodigoREC.KeyValue := 0;
         Except
        End;
        Try
         EQuantidade.Text  :='';
         Except
        End;
      end;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TItem_Recebimento.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

procedure TItem_Recebimento.FinalizaEdicao;
var
  cod, cdcnc:Integer;
begin
  If Estado=1 then
  Begin
    Inserirauto;
    close;
    open;
    LocalizarCod(SCodigo,CodigoCNC);
  End;

  If Estado=2 then
  Begin
    cod:=codigoREC;
    cdcnc:=codigoCNC;
    Alterarauto;
    close;
    open;
    LocalizarCod(cod, cdcnc);
  End;

  AtualizaControles(False);
  Estado:=0;
end;

procedure TItem_Recebimento.Importa;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  Estado:=3;
  with CTransfArq do
  begin
    SelecionaTipo(53, date);
    while not eof do
    begin
      with Self.ImportComponent do
      begin
        close;
        ParamByName('CODIGO').asInteger:=Origem;
        ParamByName('CODIGOCNC').asInteger:=OrigemCNC;
        open;
      end;
      ValidaTransf:= not Self.ImportComponent.IsEmpty;
      if Metodo='01' then
        with TItem_Recebimento(ImportComponent) do
        begin
          Self.Inserir(CodigoCNC,CodigoIRC,CodigoREC,CodigoPRD,Quantidade);
        end;
      if Metodo='02' then
        with TItem_Recebimento(ImportComponent) do
        begin
          Self.Alterar(CodigoCNC,CodigoIRC,CodigoREC,CodigoPRD,Quantidade);
        end;
      if Metodo='03' then
        with TItem_Recebimento(ImportComponent) do
        begin
          Self.Deletar(CodigoCNC,CodigoIRC);
        end;
      if Metodo='04' then
        with TItem_Recebimento(ImportComponent) do
        begin
          Self.Inserir(CodigoCNC,0,CodigoREC,CodigoPRD,Quantidade);
        end;
      if Metodo='05' then
        with TItem_Recebimento(ImportComponent) do
        begin
          Self.DeletarTodos;
        end;
      if Metodo='06' then
        with TItem_Recebimento(ImportComponent) do
        begin
          Self.Deletar(CodigoCNC,CodigoIRC);
          Self.Inserir(CodigoCNC,CodigoIRC,CodigoREC,CodigoPRD,Quantidade);
        end;
      if ValidaTransf then
        CTransfArqDest.Inserir(CodigoCNC,CodigoTRA,1,Tipo,OrigemCNC,Origem,Destino,Data,Metodo);
      next;
    end;
  end;
  Estoque:=0;
end;

{ Insere um Recebimento }
function TItem_Recebimento.Inserir(CdCNC,CdIRC, CdREC, CdPRD: Integer;PQuantidade:Double):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin

  result := true;
  Insert;
  if CdIRC=0 then
    CodigoIRC    := ProximoCodigo('IRC_CODIGO')
  else
    CodigoIRC    := CdIRC;
  try
    CodigoCNC      := CdCNC;
    CodigoPRD      := CdPRD;
    CodigoREC      := CdREC;
    Quantidade     := PQuantidade;

    try
      Post;
      if Estado<>3 then
      begin
         if CentroDeCusto=0 then
            Exporta(53, CodigoCNC, CodigoIRC, -2, '01')
         else
            Exporta(53, CodigoCNC, CodigoIRC,  0, '01');
      end;
    except
      result:=false;
      Cancel;
      ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
    end;
  except
    result:=false;
    ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
  end;
end;

function TItem_Recebimento.InserirAuto:Boolean;
Var
  Aux:TDataSetNotifyEvent;
begin
    try
      Aux:=AfterScroll;
      AfterScroll:=Nil;
      append;
      try
        Codigocnc   := CConfiguracao.CodigoCNC;
      except
      end;
      try
        codigoIRC := SCodigo;
      except
      end;
      try
        CodigoIRC  := StrToInt(ECodigoIRC.Text);
      except
      end;
      try
        CodigoREC := ECodigoREC.KeyValue;
      except
      end;
      try
        Quantidade := StrToFloat(EQuantidade.Text);
      except
      end;

      try
        Post;
        AfterScroll:=Aux;
        CarregaDados;
        result:=True;
        if CentroDeCusto=0 then
          Exporta(53, CodigoCNC, CodigoIRC, -2, '01')
        else
          Exporta(53, CodigoCNC, CodigoIRC,  0, '01');
      except
        result:=False;
        Cancel;
        ShowMessage('Não foi possível incluir o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result:=false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
end;

procedure TItem_Recebimento.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

function TItem_Recebimento.Localizar:boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Campo,Nome,campoloc:String;
  i         :Integer;
begin
  If (ECampoLocaliz.Text<>'') and (ENomeLocaliz.text<>'') Then
  Begin
    try
      campoloc:=trim(ECampoLocaliz.Text);
      for i:= length(campoloc) downto 1 do
        If campoloc[i]=' ' Then
        Begin
          Campo := Copy(campoloc,i+1,length(campoloc)-i);
          Break;
        End;
    except
    end;
    try
      Nome:=Trim(ENomeLocaliz.text);
    except
    end;
    If locate(campo,Nome, [loCaseInsensitive]) Then
      Result:=True
    else
      Result:=False;
  End;
end;

{ Localiza um Recebimento }
function TItem_Recebimento.LocalizarCod(CdIRC, CdCNC: Integer): Boolean;
begin
  If (CdIRC<>CodigoIRC) or (CdCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO; IRC_CODIGO', vararrayof([CdCNC, CdIRC]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TItem_Recebimento.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TItem_Recebimento.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 ProximoCodigo('IRC_CODIGO');
  Try
   ECodigoREC.KeyValue := 0;
   Except
  End;
  Try
   EQuantidade.Text  :='';
   Except
  End;
  AtualizaControles(True);
  Estado:=1;
end;

function TItem_Recebimento.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
    result:=true;
    if CentroDeCusto=0 then
      Exporta(53, CodigoCNC, CodigoIRC, -2, '03')
    else
      Exporta(53, CodigoCNC, CodigoIRC,  0, '03');
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
