{ ****************************************************************** }
{                                                                    }
{   VCL component TModuloOperacao                                    }
{                                                                    }
{   Modulo da Empresa                                                }
{                                                                    }
{   Code generated by Component Create for Delphi                    }
{                                                                    }
{   Generated from source file c:\eletro guerra\classe\principal\modulo_operacao.cd }
{   on 12 Jan 2001 at 14:46                                          }
{                                                                    }
{   Copyright © 1999 by SOFTECH                                      }
{                                                                    }
{ ****************************************************************** }

unit ModuloOperacao;

interface

uses WinTypes, WinProcs, Messages, SysUtils, Classes, Controls, 
     Forms, Graphics, Squery, Dbtables, Dialogs, Db, Stdctrls, 
     Mask, Dbctrls, Configuracao, Dbgrids;

type
  TModuloOperacao = class(TSQuery)
    private
      { Private fields of TModuloOperacao }
        { Storage for property CodigoCNC }
        FCodigoCNC : Integer;
        { Storage for property CodigoMOP }
        FCodigoMOP : Integer;
        { Storage for property Descricao }
        FDescricao : String;
        { Storage for property ModuloPai }
        FModuloPai : Integer;
        { Storage for property Operacao }
        FOperacao : Boolean;

      { Private methods of TModuloOperacao }
        { Method to set variable and property values and create objects }
        procedure AutoInitialize;
        { Method to free any objects created by AutoInitialize }
        procedure AutoDestroy;
        { Read method for property CodigoCNC }
        function GetCodigoCNC : Integer;
        { Write method for property CodigoCNC }
        procedure SetCodigoCNC(Value : Integer);
        { Read method for property CodigoMOP }
        function GetCodigoMOP : Integer;
        { Write method for property CodigoMOP }
        procedure SetCodigoMOP(Value : Integer);
        { Read method for property Descricao }
        function GetDescricao : String;
        { Write method for property Descricao }
        procedure SetDescricao(Value : String);

    protected
      { Protected fields of TModuloOperacao }

      { Protected methods of TModuloOperacao }
        procedure Loaded; override;

    public
      { Public fields and properties of TModuloOperacao }
        { Controla o estado da entidade(0-normal,1-Inserção,2-Alteração) }
        Estado : Integer;

      { Public methods of TModuloOperacao }
        { Altera um Beneficiário }
        function Alterar(CdCNC,CdMOP, ModuloPai: integer; Descricao:String; Operacao:Boolean):boolean;
        constructor Create(AOwner: TComponent); override;
        procedure Deletar(CdCNC,CDMDL:Integer);
        destructor Destroy; override;
        { Insere um Cliente }
        function Inserir(CdCNC,CdMDL: integer; Descricao:String):boolean;
        { Localiza um cliente }
        function LocalizarCod(CDMDL,CDCNC:Integer):Boolean;
        function LocalizarNome(Nome:String):Boolean;
        procedure PreparaAlteracao;
        procedure PreparaInsercao;
        function deletarauto:Boolean;

    published
      { Published properties of TModuloOperacao }
        property CodigoCNC : Integer read GetCodigoCNC write SetCodigoCNC;
        property CodigoMOP : Integer read GetCodigoMOP write SetCodigoMOP;
        property Descricao : String read GetDescricao write SetDescricao;
        property ModuloPai : Integer read FModuloPai write FModuloPai;
        property Operacao : Boolean read FOperacao write FOperacao;

  end;

procedure Register;

implementation

procedure Register;
begin
     { Register TModuloOperacao with Softech as its
       default page on the Delphi component palette }
     RegisterComponents('Softech', [TModuloOperacao]);
end;

{ Method to set variable and property values and create objects }
procedure TModuloOperacao.AutoInitialize;
begin
     Estado := 0;
end; { of AutoInitialize }

{ Method to free any objects created by AutoInitialize }
procedure TModuloOperacao.AutoDestroy;
begin
     { No objects from AutoInitialize to free }
end; { of AutoDestroy }

{ Read method for property CodigoCNC }
function TModuloOperacao.GetCodigoCNC : Integer;
begin
  try
    Result := Self.fieldByName('CNC_CODIGO').asInteger;
  except
    result:= 0
  end;
end;

{ Write method for property CodigoCNC }
procedure TModuloOperacao.SetCodigoCNC(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('CNC_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "CNC_CODIGO"!');
    end;
end;

{ Read method for property CodigoMOP }
function TModuloOperacao.GetCodigoMOP : Integer;
begin
  try
    result := Self.fieldByName('MDL_CODIGO').asInteger;
  except
    result := 0;
  end;
end;

{ Write method for property CodigoMOP }
procedure TModuloOperacao.SetCodigoMOP(Value : Integer);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
    try
      Self.fieldByName('MDL_CODIGO').asInteger := Value;
    except
      ShowMessage('Não foi possível alterar o campo "MDL_CODIGO"!');
    end;
end;

{ Read method for property Descricao }
function TModuloOperacao.GetDescricao : String;
begin
  try
    Result := Self.fieldByName('MDL_DESCRICAO').asString;
  except
    result:= ''
  end;
end;

{ Write method for property Descricao }
procedure TModuloOperacao.SetDescricao(Value : String);
begin
  if (Self.State=dsEdit) or (Self.State=dsInsert) then
  try
    Self.fieldByName('MDL_DESCRICAO').asString := Value;
  except
    ShowMessage('Não foi possível alterar o campo "MDL_DESCRICAO"!');
  end;
end;

{ Altera um Beneficiário }
function TModuloOperacao.Alterar(CdCNC,CdMOP, ModuloPai: integer; Descricao:String; Operacao:Boolean):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  result := true;
  If not(localizarCod(CdMDL,CdCNC)) Then
  begin
    result := false;
    ShowMessage('Não foi possível alterar registro corrente pois o registro não existe!');
  end
  Else
  Begin
    try
      edit;
      Descricao     := Descricao;
      try
        Post;

      except
        result := false;
        Cancel;
        ShowMessage('Não foi possível alterar o registro corrente. Verifique se o tipo de dado que você está tentando alterar é o mesmo do campo.');
      end;
    except
      result := false;
      ShowMessage('Não foi possível alterar registro corrente. Verifique se a tabela encontra-se em modo de somente leitura.');
    end;
  End;
end;

constructor TModuloOperacao.Create(AOwner: TComponent);
begin
     { Call the Create method of the parent class }
     inherited Create(AOwner);

     { AutoInitialize sets the initial values of variables and      }
     { properties; also, it creates objects for properties of       }
     { standard Delphi object types (e.g., TFont, TTimer,           }
     { TPicture) and for any variables marked as objects.           }
     { AutoInitialize method is generated by Component Create.      }
     AutoInitialize;

     { Code to perform other tasks when the component is created }

end;

procedure TModuloOperacao.Deletar(CdCNC,CDMDL:Integer);
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If not(localizarCod(CdMDL,CdCNC)) Then
    ShowMessage('Não foi possível deletar registro corrente pois o registro não existe!')
  Else
  Begin
    try
      Delete;
      if TQuery(Self).isEmpty then
      begin
         try
           ECodigoMDL.Clear;
           except
         end;
         try
           EDescricao.Clear;
           except
         end;
      end;
    Except
      ShowMessage('Não foi possível deletar registro corrente!');
    End;
  End;
end;

destructor TModuloOperacao.Destroy;
begin
     { AutoDestroy, which is generated by Component Create, frees any   }
     { objects created by AutoInitialize.                               }
     AutoDestroy;

     { Here, free any other dynamic objects that the component methods  }
     { created but have not yet freed.  Also perform any other clean-up }
     { operations needed before the component is destroyed.             }

     { Last, free the component by calling the Destroy method of the    }
     { parent class.                                                    }
     inherited Destroy;
end;

{ Insere um Cliente }
function TModuloOperacao.Inserir(CdCNC,CdMDL: integer; Descricao:String):boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
Var
  Cod:Integer;
begin
  if CdMDL=0 then
    Cod    := ProximoCodigo('MDL_CODIGO')
  else
    Cod    := CdMDL;
  If (localizarCod(Cod,CdCNC)) Then
  begin
    ShowMessage('Não foi possível inserir o registro corrente pois o mesmo já existe!');
    result:=false;
  end
  Else
  begin
     result := true;
     Insert;
     try
        CodigoMDL        := Cod;
        CodigoCNC        := CdCNC;
        Descricao        := Descricao;
        try
          Post;

        except
          result := false;
          Cancel;
          ShowMessage('Não foi possível incluir o registro corrente! Verifique se o tipo de dado a ser inserido é igual ao do campo.');
        end;
      except
        result := false;
        ShowMessage('Não foi possível incluir o registro! Verifique se a tabela encontra-se em modo de somente leitura.');
     end;
  end;
end;

procedure TModuloOperacao.Loaded;
begin
     inherited Loaded;

     { Perform any component setup that depends on the property
       values having been set }

end;

{ Localiza um cliente }
function TModuloOperacao.LocalizarCod(CDMDL,CDCNC:Integer):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If (CDMDL<>CodigoMDL) or (CDCNC<>CodigoCNC) Then
    If locate('CNC_CODIGO;MDL_CODIGO', vararrayof([CDCNC, CDMDL]), []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;


function TModuloOperacao.LocalizarNome(Nome:String):Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  If Nome<>Descricao Then
    If locate('MDL_descricao',Nome, []) Then
      Result:=True
    else
      Result:=False
  Else
    Result:=True;
end;

procedure TModuloOperacao.PreparaAlteracao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  AtualizaControles(True);
  Estado:=2;
end;

procedure TModuloOperacao.PreparaInsercao;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
 ProximoCodigo('MDL_CODIGO');
 try
   EDescricao.Clear;
   except
 end;

  AtualizaControles(True);
  Estado:=1;
end;

function TModuloOperacao.deletarauto:Boolean;
     { Internal declarations for method }
     { type }
     { . . . }
     { var }
     { . . . }
begin
  try
    Delete;
    result:=true;
    GeraLog(1550,CodigoCNC,CodigoMDL,'40',CConfiguracao.DataHora);
  Except
    Result:=False;
    ShowMessage('Não foi possível deletar registro corrente!');
  End;
end;


end.
